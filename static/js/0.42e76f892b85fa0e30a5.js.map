{"version":3,"sources":["webpack:///static/js/0.42e76f892b85fa0e30a5.js","webpack:///./~/core-js/library/modules/es6.number.parse-int.js","webpack:///./~/echarts-stat/dist/ecStat.js","webpack:///./~/core-js/library/modules/_parse-int.js","webpack:///Chart2.vue","webpack:///./src/components/Chart2.vue","webpack:///./~/babel-runtime/core-js/number/parse-int.js","webpack:///./~/core-js/library/modules/_string-ws.js","webpack:///./src/components/Chart2.vue?a4e3","webpack:///./~/core-js/library/modules/_string-trim.js","webpack:///./src/components/Chart2.vue?c056","webpack:///./~/core-js/library/fn/number/parse-int.js","webpack:///./~/echarts-stat/index.js","webpack:///./src/components/Chart2.vue?d79d"],"names":["webpackJsonp","8sHD","module","exports","__webpack_require__","$export","$parseInt","S","F","Number","parseInt","GY9q","root","factory","this","modules","moduleId","installedModules","id","loaded","call","m","c","p","__WEBPACK_AMD_DEFINE_RESULT__","undefined","require","clustering","regression","statistics","histogram","kMeans","data","k","minDist","minIndex","distIJ","ptsInClust","size","arraySize","clusterAssigned","zeros","centroids","createRandCent","clusterChanged","i","Infinity","j","distEuclid","mathPow","length","push","meanInColumns","dataList","sum","mean","meanArray","hierarchicalKMeans","stepByStep","oneStep","index","lowestSSE","centSplit","newCentroid","newClusterAss","centList","ptsNotClust","clusterAssment","dataSet","clusterInfo","sseSplit","sumOfColumn","sseNotSplit","arraySum","pointInClust","result","pointsInCluster","isEnd","squareError","dataPreprocess","centroid0","step","next","minJ","maxJ","rangeJ","Math","random","vec1","vec2","isArray","mathSqrt","powerSum","dataProcess","array","sqrt","pow","Error","predata","isNumber","isCorrect","getPrecision","val","str","toString","dotIndex","indexOf","number","s","value","objToString","n","zeroArray","vector","ascending","a","b","NaN","bisect","start","end","mid","floor","compare","map","obj","cb","context","nativeMap","len","Object","prototype","arrayProto","Array","isNaN","isInteger","isFinite","round","gaussianElimination","matrix","maxColumn","abs","temp","regreMethods","linear","sumX","sumY","sumXY","sumXX","gradient","intercept","coordinate","points","parameter","expression","linearThroughOrigin","exponential","sumXXY","sumYlny","sumXYlny","log","denominator","coefficient","E","logarithmic","sumlnx","sumYlnx","sumlnxlnx","polynomial","order","coeMatrix","lhs","sumA","sumB","coeArray","string","regreMethod","max","deviation","median","min","quantile","sampleVariance","maxData","variance","squaredDeviation","temple","meanValue","sumData","h","minData","computeBins","threshold","thresholdMethod","squareRoot","values","maxValue","minValue","binsNumber","tickStep","precision","LN10","rangeArray","range","ceil","toFixed","bins","sample","x0","x1","bin","customData","scott","freedmanDiaconis","sort","sturges","LN2","arguments","stop","count","step0","step1","error","KpO7","$trim","trim","ws","hex","radix","String","test","QxJS","__webpack_exports__","defineProperty","__WEBPACK_IMPORTED_MODULE_0_babel_runtime_core_js_number_parse_int__","__WEBPACK_IMPORTED_MODULE_0_babel_runtime_core_js_number_parse_int___default","__WEBPACK_IMPORTED_MODULE_1_echarts__","__WEBPACK_IMPORTED_MODULE_1_echarts___default","__WEBPACK_IMPORTED_MODULE_2_echarts_stat__","__WEBPACK_IMPORTED_MODULE_2_echarts_stat___default","initData","fetchData","l","name","trueLength","methods","reset","console","indexChange","item","initCharts","target","myRegression","init","document","getElementById","setOption","toolbox","feature","saveAsImage","xAxis","type","splitLine","lineStyle","yAxis","series","markPoint","itemStyle","normal","color","label","show","position","formatter","textStyle","fontSize","coord","created","YNOL","Component","gBtx","default","__esModule","hyta","iEFX","version","sources","names","mappings","file","sourcesContent","sourceRoot","mnVu","defined","fails","spaces","space","non","ltrim","RegExp","rtrim","exporter","KEY","exec","ALIAS","exp","FORCE","fn","P","TYPE","replace","oB8E","content","locals","qrpI","siuG","zXSq","render","_vm","_h","$createElement","_c","_self","staticClass","attrs","_l","key","directives","rawName","domProps","on","keyup","$event","_k","keyCode","input","composing","$set","_v","maxlength","click","staticRenderFns"],"mappings":"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","file":"static/js/0.42e76f892b85fa0e30a5.js","sourcesContent":["webpackJsonp([0],{\n\n/***/ \"8sHD\":\n/***/ (function(module, exports, __webpack_require__) {\n\nvar $export = __webpack_require__(\"kM2E\");\nvar $parseInt = __webpack_require__(\"KpO7\");\n// 20.1.2.13 Number.parseInt(string, radix)\n$export($export.S + $export.F * (Number.parseInt != $parseInt), 'Number', { parseInt: $parseInt });\n\n\n/***/ }),\n\n/***/ \"GY9q\":\n/***/ (function(module, exports, __webpack_require__) {\n\n(function webpackUniversalModuleDefinition(root, factory) {\n\tif(true)\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"ecStat\"] = factory();\n\telse\n\t\troot[\"ecStat\"] = factory();\n})(this, function() {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n\n\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require) {\n\n\t    return {\n\n\t        clustering: __webpack_require__(1),\n\t        regression: __webpack_require__(5),\n\t        statistics: __webpack_require__(6),\n\t        histogram: __webpack_require__(15)\n\n\t    };\n\n\t}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n/***/ }),\n/* 1 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require) {\n\n\t    var dataProcess = __webpack_require__(2);\n\t    var dataPreprocess = dataProcess.dataPreprocess;\n\t    var array = __webpack_require__(3);\n\t    var arraySize = array.size;\n\t    var sumOfColumn = array.sumOfColumn;\n\t    var arraySum = array.sum;\n\t    var zeros = array.zeros;\n\t    var isArray = array.isArray;\n\t    var mathSqrt = Math.sqrt;\n\t    var mathPow = Math.pow;\n\n\t    /**\n\t     * KMeans of clustering algorithm\n\t     * @param  {Array.<Array.<number>>} data  two-dimension array\n\t     * @param  {number} k   the number of clusters in a dataset\n\t     * @return {Object}\n\t     */\n\t    function kMeans(data, k) {\n\n\t        var size = arraySize(data);\n\t        // create array to assign data points to centroids, also holds SE of each point\n\t        var clusterAssigned = zeros(size[0], 2);\n\t        var centroids = createRandCent(data, k);\n\t        var clusterChanged = true;\n\t        var minDist;\n\t        var minIndex;\n\t        var distIJ;\n\t        var ptsInClust;\n\n\t        while (clusterChanged) {\n\t            clusterChanged = false;\n\t            for (var i = 0; i < size[0]; i++) {\n\t                minDist = Infinity;\n\t                minIndex = -1;\n\t                for (var j = 0; j < k; j++) {\n\t                    distIJ = distEuclid(data[i], centroids[j]);\n\t                    if (distIJ < minDist) {\n\t                        minDist = distIJ;\n\t                        minIndex = j;\n\t                    }\n\t                }\n\t                if (clusterAssigned[i][0] !== minIndex) {\n\t                    clusterChanged = true;\n\t                }\n\t                clusterAssigned[i][0] = minIndex;\n\t                clusterAssigned[i][1] = mathPow(minDist, 2);\n\t            }\n\t            //recalculate centroids\n\t            for (var i = 0; i < k; i++) {\n\t                ptsInClust = [];\n\t                for (var j = 0; j < clusterAssigned.length; j++) {\n\t                    if (clusterAssigned[j][0] === i) {\n\t                        ptsInClust.push(data[j]);\n\t                    }\n\t                }\n\t                centroids[i] = meanInColumns(ptsInClust);\n\t            }\n\t        }\n\n\t        var clusterWithKmeans = {\n\t            centroids: centroids,\n\t            clusterAssigned: clusterAssigned\n\t        };\n\t        return clusterWithKmeans;\n\t    }\n\n\t    /**\n\t     * Calculate the average of each column in a two-dimensional array\n\t     *  and returns the values as an array.\n\t     * @param  {Array.<Array>} dataList two-dimensional array\n\t     * @return {Array}\n\t     */\n\t    function meanInColumns(dataList) {\n\n\t        var size = arraySize(dataList);\n\t        var meanArray = [];\n\t        var sum;\n\t        var mean;\n\t        for (var j = 0; j < size[1]; j++) {\n\t            sum = 0;\n\t            for (var i = 0; i < size[0]; i++) {\n\t                sum += dataList[i][j];\n\t            }\n\t            mean = sum / size[0];\n\t            meanArray.push(mean);\n\t        }\n\t        return meanArray;\n\t    }\n\n\t    /**\n\t     * The combine of hierarchical clustering and k-means.\n\t     * @param  {Array} data   two-dimension array.\n\t     * @param  {[type]} k   the number of clusters in a dataset. It has to be greater than 1.\n\t     * @param  {boolean}  stepByStep\n\t     * @return {}\n\t     */\n\t    function hierarchicalKMeans(data, k, stepByStep) {\n\t        if (k < 2 ) {\n\t            return;\n\t        }\n\t        var dataSet = dataPreprocess(data);\n\t        var size = arraySize(dataSet);\n\t        var clusterAssment = zeros(size[0], 2);\n\t        // initial center point\n\t        var centroid0 = meanInColumns(dataSet);\n\t        var centList = [centroid0];\n\t        var squareError;\n\t        for (var i = 0; i < size[0]; i++) {\n\t            squareError = distEuclid(dataSet[i], centroid0);\n\t            clusterAssment[i][1] = mathPow(squareError, 2);\n\t        }\n\t        var lowestSSE;\n\t        var ptsInClust;\n\t        var ptsNotClust;\n\t        var clusterInfo;\n\t        var sseSplit;\n\t        var sseNotSplit;\n\t        var index = 1;\n\t        var result = {\n\t            isEnd: false\n\t        };\n\n\t        function oneStep() {\n\t            //the existing clusters are continuously divided\n\t            //until the number of clusters is k\n\t            if (index < k) {\n\t                lowestSSE = Infinity;\n\t                var centSplit;\n\t                var newCentroid;\n\t                var newClusterAss;\n\n\t                for (var j = 0; j < centList.length; j++) {\n\t                    ptsInClust = [];\n\t                    ptsNotClust = [];\n\t                    for (var i = 0; i < clusterAssment.length; i++) {\n\t                        if (clusterAssment[i][0] === j) {\n\t                            ptsInClust.push(dataSet[i]);\n\t                        }\n\t                        else {\n\t                            ptsNotClust.push(clusterAssment[i][1]);\n\t                        }\n\t                    }\n\t                    clusterInfo = kMeans(ptsInClust, 2);\n\t                    sseSplit = sumOfColumn(clusterInfo.clusterAssigned, 1);\n\t                    sseNotSplit = arraySum(ptsNotClust);\n\t                    if (sseSplit + sseNotSplit < lowestSSE) {\n\t                        lowestSSE = sseNotSplit + sseSplit;\n\t                        centSplit = j;\n\t                        newCentroid = clusterInfo.centroids;\n\t                        newClusterAss = clusterInfo.clusterAssigned;\n\t                    }\n\t                }\n\n\t                for (var i = 0; i < newClusterAss.length; i++) {\n\t                    if (newClusterAss[i][0] === 0) {\n\t                        newClusterAss[i][0] = centSplit;\n\t                    }\n\t                    else if (newClusterAss[i][0] === 1) {\n\t                        newClusterAss[i][0] = centList.length;\n\t                    }\n\t                }\n\n\t                centList[centSplit] = newCentroid[0];\n\t                centList.push(newCentroid[1]);\n\t                for ( i = 0, j = 0; i < clusterAssment.length && j < newClusterAss.length; i++) {\n\t                    if (clusterAssment[i][0] === centSplit) {\n\t                        clusterAssment[i][0] = newClusterAss[j][0];\n\t                        clusterAssment[i][1] = newClusterAss[j++][1];\n\t                    }\n\t                }\n\n\t                var pointInClust = [];\n\t                for (var i = 0; i < centList.length; i++) {\n\t                    pointInClust[i] = [];\n\t                    for (var j = 0; j < clusterAssment.length; j++) {\n\t                        if (clusterAssment[j][0] === i) {\n\t                            pointInClust[i].push(dataSet[j]);\n\t                        }\n\t                    }\n\t                }\n\n\t                result.clusterAssment = clusterAssment;\n\t                result.centroids = centList;\n\t                result.pointsInCluster = pointInClust;\n\n\n\t                index++;\n\t            }\n\t            else {\n\t                result.isEnd = true;\n\t            }\n\n\t            return result;\n\t        }\n\n\t        var step = {\n\t            next: oneStep\n\t        };\n\n\t        if (!stepByStep) {\n\t            var result;\n\t            while (!(result = step.next()).isEnd);\n\t            return result;\n\t        }\n\t        else {\n\t            return step;\n\t        }\n\n\t    }\n\n\t    /**\n\t     * Create random centroid of kmeans.\n\t     * @param  {Array.<number>} dataSet  two-dimension array\n\t     * @param  {number} k   the number of centroids to be created\n\t     * @return {Array.<number>}   random centroids of kmeans\n\t     */\n\t    function createRandCent(dataSet, k) {\n\t        var size = arraySize(dataSet);\n\t        //constructs a two-dimensional array with all values 0\n\t        var centroids = zeros(k, size[1]);\n\t        var minJ;\n\t        var maxJ;\n\t        var rangeJ;\n\t        //create random cluster centers, within bounds of each dimension\n\t        for (var j = 0; j < size[1]; j++) {\n\t            minJ = dataSet[0][j];\n\t            maxJ = dataSet[0][j];\n\t            for (var i = 1; i < size[0]; i++) {\n\t                if (dataSet[i][j] < minJ) {\n\t                    minJ = dataSet[i][j];\n\t                }\n\t                if (dataSet[i][j] > maxJ) {\n\t                    maxJ = dataSet[i][j];\n\t                }\n\t            }\n\t            rangeJ = maxJ - minJ;\n\t            for (var i = 0; i < k; i++) {\n\t                centroids[i][j] = minJ + rangeJ * Math.random();\n\t            }\n\t        }\n\t        return centroids;\n\t    }\n\n\t    /**\n\t     * Distance method for calculating similarity\n\t     * @param  {Array.<number>}  vec1\n\t     * @param  {Array.<nnumber>}  vec2\n\t     * @return {number}\n\t     */\n\t    function distEuclid(vec1, vec2) {\n\n\t        if (!isArray(vec1) && !isArray(vec2)) {\n\t            return mathSqrt(mathPow(vec1 - vec2, 2));\n\t        }\n\n\t        var powerSum = 0;\n\t        //subtract the corresponding elements in the vectors\n\t        for (var i = 0; i < vec1.length; i++) {\n\t            powerSum += mathPow(vec1[i] - vec2[i], 2);\n\t        }\n\n\t        return mathSqrt(powerSum);\n\t    }\n\n\t    return {\n\t        kMeans: kMeans,\n\t        hierarchicalKMeans: hierarchicalKMeans\n\t    };\n\n\t}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n/***/ }),\n/* 2 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require) {\n\n\t    var array = __webpack_require__(3);\n\t    var isArray = array.isArray;\n\t    var size = array.size;\n\t    var number = __webpack_require__(4);\n\t    var isNumber = number.isNumber;\n\n\t    /**\n\t     * Data preprocessing, filter the wrong data object.\n\t     *  for example [12,] --- missing y value\n\t     *              [,12] --- missing x value\n\t     *              [12, b] --- incorrect y value\n\t     *              ['a', 12] --- incorrect x value\n\t     * @param  {Array.<Array>} data\n\t     * @return {Array.<Array.<number>>}\n\t     */\n\t    function dataPreprocess(data) {\n\n\t        if (!isArray(data)) {\n\t            throw new Error('Invalid data type, you should input an array');\n\t        }\n\t        var predata = [];\n\t        var arraySize = size(data);\n\n\t        if (arraySize.length === 1) {\n\n\t            for (var i = 0; i < arraySize[0]; i++) {\n\n\t                if (isNumber(data[i])) {\n\t                    predata.push(data[i]);\n\t                }\n\t            }\n\t        }\n\t        else if (arraySize.length === 2) {\n\n\t            for (var i = 0; i < arraySize[0]; i++) {\n\n\t                var isCorrect = true;\n\t                for (var j = 0; j < arraySize[1]; j++) {\n\t                    if (!isNumber(data[i][j])) {\n\t                        isCorrect = false;\n\t                    }\n\t                }\n\t                if (isCorrect) {\n\t                    predata.push(data[i]);\n\t                }\n\t            }\n\t        }\n\t        return predata;\n\t    }\n\n\t    /**\n\t     * @param {string|number} val\n\t     * @return {number}\n\t     */\n\t    function getPrecision(val) {\n\t        var str = val.toString();\n\t        // scientific notation is not considered\n\t        var dotIndex = str.indexOf('.');\n\t        return dotIndex < 0 ? 0 : str.length - 1 - dotIndex;\n\t    }\n\n\t    return {\n\t        dataPreprocess: dataPreprocess,\n\t        getPrecision: getPrecision\n\t    };\n\n\t}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n/***/ }),\n/* 3 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require) {\n\n\t    var objToString = Object.prototype.toString;\n\t    var arrayProto = Array.prototype;\n\t    var nativeMap = arrayProto.map;\n\n\t    /**\n\t     * Get the size of a array\n\t     * @param  {Array} data\n\t     * @return {Array}\n\t     */\n\t    function size(data) {\n\t        var s = [];\n\t        while (isArray(data)) {\n\t            s.push(data.length);\n\t            data = data[0];\n\t        }\n\t        return s;\n\t    }\n\n\t    /**\n\t     * @param {*}  value\n\t     * @return {boolean}\n\t     */\n\t    function isArray(value) {\n\t        return objToString.call(value) === '[object Array]';\n\t    }\n\n\t    /**\n\t     * constructs a (m x n) array with all values 0\n\t     * @param  {number} m  the row\n\t     * @param  {number} n  the column\n\t     * @return {Array}\n\t     */\n\t    function zeros(m, n) {\n\t        var zeroArray = [];\n\t        for (var i = 0; i < m ; i++) {\n\t            zeroArray[i] = [];\n\t            for (var j = 0; j < n; j++) {\n\t                zeroArray[i][j] = 0;\n\t            }\n\t        }\n\t        return zeroArray;\n\t    }\n\n\t    /**\n\t     * Sums each element in the array.\n\t     * Internal use, for performance considerations, to avoid\n\t     * unnecessary judgments and calculations.\n\t     * @param  {Array} vector\n\t     * @return {number}\n\t     */\n\t    function sum(vector) {\n\t        var sum = 0;\n\t        for (var i = 0; i < vector.length; i++) {\n\t            sum += vector[i];\n\t        }\n\t        return sum;\n\t    }\n\n\t    /**\n\t     * Computes the sum of the specified column elements in a two-dimensional array\n\t     * @param  {Array.<Array>} dataList  two-dimensional array\n\t     * @param  {number} n  the specified column, zero-based\n\t     * @return {number}\n\t     */\n\t    function sumOfColumn(dataList, n) {\n\t        var sum = 0;\n\t        for (var i = 0; i < dataList.length; i++) {\n\t            sum += dataList[i][n];\n\t        }\n\t        return sum;\n\t    }\n\n\n\t    function ascending(a, b) {\n\n\t        return a > b ? 1 : a < b ? -1 : a === b ? 0 : NaN;\n\n\t    }\n\n\t    /**\n\t     * Binary search algorithm --- this bisector is specidfied to histogram, which every bin like that [a, b),\n\t     * so the return value use to add 1.\n\t     * @param  {Array.<number>} array\n\t     * @param  {number} value\n\t     * @param  {number} start\n\t     * @param  {number} end\n\t     * @return {number}\n\t     */\n\t    function bisect(array, value, start, end) { //移出去\n\n\t        if (start == null) {\n\t            start = 0;\n\t        }\n\t        if (end == null) {\n\t            end = array.length;\n\t        }\n\t        while (start < end) {\n\t            var mid = Math.floor((start + end) / 2);\n\t            var compare = ascending(array[mid], value);\n\t            if (compare > 0) {\n\t                end = mid;\n\t            }\n\t            else if (compare < 0) {\n\t                start = mid + 1;\n\t            }\n\t            else {\n\t                return mid + 1;\n\t            }\n\t        }\n\t        return start;\n\t    }\n\n\t    /**\n\t     * 数组映射\n\t     * @memberOf module:zrender/core/util\n\t     * @param {Array} obj\n\t     * @param {Function} cb\n\t     * @param {*} [context]\n\t     * @return {Array}\n\t     */\n\t    function map(obj, cb, context) {\n\t        if (!(obj && cb)) {\n\t            return;\n\t        }\n\t        if (obj.map && obj.map === nativeMap) {\n\t            return obj.map(cb, context);\n\t        }\n\t        else {\n\t            var result = [];\n\t            for (var i = 0, len = obj.length; i < len; i++) {\n\t                result.push(cb.call(context, obj[i], i, obj));\n\t            }\n\t            return result;\n\t        }\n\t    }\n\n\n\t    return {\n\t        size: size,\n\t        isArray: isArray,\n\t        zeros: zeros,\n\t        sum: sum,\n\t        sumOfColumn: sumOfColumn,\n\t        ascending: ascending,\n\t        bisect: bisect,\n\t        map: map\n\t    };\n\n\t}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n/***/ }),\n/* 4 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require) {\n\n\t    /**\n\t     * Test whether value is a number.\n\t     * @param  {*}  value\n\t     * @return {boolean}\n\t     */\n\t    function isNumber(value) {\n\n\t        value = value === null ? NaN : +value;\n\t        return typeof value === 'number' && !isNaN(value);\n\t    }\n\n\t    /**\n\t     * Test if a number is integer.\n\t     * @param  {number}  value\n\t     * @return {boolean}\n\t     */\n\t    function isInteger(value) {\n\t        return isFinite(value) && value === Math.round(value);\n\t    }\n\n\t    return {\n\t        isNumber: isNumber,\n\t        isInteger: isInteger\n\t    };\n\n\t}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n/***/ }),\n/* 5 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require) {\n\n\t    var dataProcess = __webpack_require__(2);\n\t    var dataPreprocess = dataProcess.dataPreprocess;\n\n\t    var regreMethods = {\n\n\t        /**\n\t         * Common linear regression algorithm\n\t         * @param  {Array.<Array.<number>>} data two-dimensional array\n\t         * @return {Object}\n\t         */\n\t        linear: function (data) {\n\n\t            var predata = dataPreprocess(data);\n\t            var sumX = 0;\n\t            var sumY = 0;\n\t            var sumXY = 0;\n\t            var sumXX = 0;\n\t            var len = predata.length;\n\n\t            for (var i = 0; i < len; i++) {\n\t                sumX += predata[i][0];\n\t                sumY += predata[i][1];\n\t                sumXY += predata[i][0] * predata[i][1];\n\t                sumXX += predata[i][0] * predata[i][0];\n\t            }\n\n\t            var gradient = ((len * sumXY) - (sumX * sumY)) / ((len * sumXX) - (sumX * sumX));\n\t            var intercept = (sumY / len) - ((gradient * sumX) / len);\n\n\t            var result = [];\n\t            for (var j = 0; j < predata.length; j++) {\n\t                var coordinate = [predata[j][0], gradient * predata[j][0] + intercept];\n\t                result.push(coordinate);\n\t            }\n\n\t            var string = 'y = ' + Math.round(gradient * 100) / 100 + 'x + ' + Math.round(intercept * 100) / 100;\n\n\t            return {\n\t                points: result,\n\t                parameter: {\n\t                    gradient: gradient,\n\t                    intercept: intercept\n\t                },\n\t                expression: string\n\t            };\n\t        },\n\n\t        /**\n\t         * If the raw data include [0,0] point, we should choose linearThroughOrigin\n\t         *   instead of linear.\n\t         * @param  {Array.<Array>} data  two-dimensional number array\n\t         * @return {Object}\n\t         */\n\t        linearThroughOrigin: function (data) {\n\n\t            var predata = dataPreprocess(data);\n\t            var sumXX = 0;\n\t            var sumXY = 0;\n\n\t            for (var i = 0; i < predata.length; i++) {\n\t                sumXX += predata[i][0] * predata[i][0];\n\t                sumXY += predata[i][0] * predata[i][1];\n\t            }\n\n\t            var gradient = sumXY / sumXX;\n\t            var result = [];\n\n\t            for (var j = 0; j < predata.length; j++) {\n\t                var coordinate = [predata[j][0], predata[j][0] * gradient];\n\t                result.push(coordinate);\n\t            }\n\n\t            var string = 'y = ' + Math.round(gradient * 100) / 100 + 'x';\n\n\t            return {\n\t                points: result,\n\t                parameter: {\n\t                    gradient: gradient\n\t                },\n\t                expression: string\n\t            };\n\t        },\n\n\t        /**\n\t         * Exponential regression\n\t         * @param  {Array.<Array.<number>>} data  two-dimensional number array\n\t         * @return {Object}\n\t         */\n\t        exponential: function (data) {\n\n\t            var predata = dataPreprocess(data);\n\t            var sumX = 0;\n\t            var sumY = 0;\n\t            var sumXXY = 0;\n\t            var sumYlny = 0;\n\t            var sumXYlny = 0;\n\t            var sumXY = 0;\n\n\t            for (var i = 0; i < predata.length; i++) {\n\t                sumX += predata[i][0];\n\t                sumY += predata[i][1];\n\t                sumXY += predata[i][0] * predata[i][1];\n\t                sumXXY += predata[i][0] * predata[i][0] * predata[i][1];\n\t                sumYlny += predata[i][1] * Math.log(predata[i][1]);\n\t                sumXYlny += predata[i][0] * predata[i][1] * Math.log(predata[i][1]);\n\t            }\n\n\t            var denominator = (sumY * sumXXY) - (sumXY * sumXY);\n\t            var coefficient = Math.pow(Math.E, (sumXXY * sumYlny - sumXY * sumXYlny) / denominator);\n\t            var index = (sumY * sumXYlny - sumXY * sumYlny) / denominator;\n\t            var result = [];\n\n\t            for (var j = 0; j < predata.length; j++) {\n\t                var coordinate = [predata[j][0], coefficient * Math.pow(Math.E, index * predata[j][0])];\n\t                result.push(coordinate);\n\t            }\n\n\t            var string = 'y = ' + Math.round(coefficient * 100) / 100 + 'e^(' + Math.round(index * 100) / 100 + 'x)';\n\n\t            return {\n\t                points: result,\n\t                parameter: {\n\t                    coefficient: coefficient,\n\t                    index: index\n\t                },\n\t                expression: string\n\t            };\n\n\t        },\n\n\t        /**\n\t         * Logarithmic regression\n\t         * @param  {Array.<Array.<number>>} data  two-dimensional number array\n\t         * @return {Object}\n\t         */\n\t        logarithmic: function (data) {\n\n\t            var predata = dataPreprocess(data);\n\t            var sumlnx = 0;\n\t            var sumYlnx = 0;\n\t            var sumY = 0;\n\t            var sumlnxlnx = 0;\n\n\t            for (var i = 0; i < predata.length; i++) {\n\t                sumlnx += Math.log(predata[i][0]);\n\t                sumYlnx += predata[i][1] * Math.log(predata[i][0]);\n\t                sumY += predata[i][1];\n\t                sumlnxlnx += Math.pow(Math.log(predata[i][0]), 2);\n\t            }\n\n\t            var gradient = (i * sumYlnx - sumY * sumlnx) / (i * sumlnxlnx - sumlnx * sumlnx);\n\t            var intercept = (sumY - gradient * sumlnx) / i;\n\t            var result = [];\n\n\t            for (var j = 0; j < predata.length; j++) {\n\t                var coordinate = [predata[j][0], gradient * Math.log(predata[j][0]) + intercept];\n\t                result.push(coordinate);\n\t            }\n\n\t            var string =\n\t                'y = '\n\t                + Math.round(intercept * 100) / 100\n\t                + ' + '\n\t                + Math.round(gradient * 100) / 100 + 'ln(x)';\n\n\t            return {\n\t                points: result,\n\t                parameter: {\n\t                    gradient: gradient,\n\t                    intercept: intercept\n\t                },\n\t                expression: string\n\t            };\n\n\t        },\n\n\t        /**\n\t         * Polynomial regression\n\t         * @param  {Array.<Array.<number>>} data  two-dimensional number array\n\t         * @param  {number} order  order of polynomials\n\t         * @return {Object}\n\t         */\n\t        polynomial: function (data, order) {\n\n\t            var predata = dataPreprocess(data);\n\t            if (typeof order === 'undefined') {\n\t                order = 2;\n\t            }\n\t            //coefficient matrix\n\t            var coeMatrix = [];\n\t            var lhs = [];\n\t            var k = order + 1;\n\n\t            for (var i = 0; i < k; i++) {\n\t                var sumA = 0;\n\t                for (var n = 0; n < predata.length; n++) {\n\t                    sumA += predata[n][1] * Math.pow(predata[n][0], i);\n\t                }\n\t                lhs.push(sumA);\n\n\t                var temp = [];\n\t                for (var j = 0; j < k; j++) {\n\t                    var sumB = 0;\n\t                    for (var m = 0; m < predata.length; m++) {\n\t                        sumB += Math.pow(predata[m][0], i + j);\n\t                    }\n\t                    temp.push(sumB);\n\t                }\n\t                coeMatrix.push(temp);\n\t            }\n\t            coeMatrix.push(lhs);\n\n\t            var coeArray = gaussianElimination(coeMatrix, k);\n\n\t            var result = [];\n\n\t            for (var i = 0; i < predata.length; i++) {\n\t                var value = 0;\n\t                for (var n = 0; n < coeArray.length; n++) {\n\t                    value += coeArray[n] * Math.pow(predata[i][0], n);\n\t                }\n\t                result.push([predata[i][0], value]);\n\t            }\n\n\t            var string = 'y = ';\n\t            for (var i = coeArray.length - 1; i >= 0; i--) {\n\t                if (i > 1) {\n\t                    string += Math.round(coeArray[i] * Math.pow(10, i + 1)) / Math.pow(10, i + 1) + 'x^' + i + ' + ';\n\t                }\n\t                else if (i === 1) {\n\t                    string += Math.round(coeArray[i] * 100) / 100 + 'x' + ' + ';\n\t                }\n\t                else {\n\t                    string += Math.round(coeArray[i] * 100) / 100;\n\t                }\n\t            }\n\n\t            return {\n\t                points: result,\n\t                parameter: coeArray,\n\t                expression: string\n\t            };\n\n\t        }\n\n\t    };\n\n\t    /**\n\t     * Gaussian elimination\n\t     * @param  {Array.<Array.<number>>} matrix   two-dimensional number array\n\t     * @param  {number} number\n\t     * @return {Array}\n\t     */\n\t    function gaussianElimination(matrix, number) {\n\n\t        for (var i = 0; i < matrix.length - 1; i++) {\n\t            var maxColumn = i;\n\t            for (var j = i + 1; j < matrix.length - 1; j++) {\n\t                if (Math.abs(matrix[i][j]) > Math.abs(matrix[i][maxColumn])) {\n\t                    maxColumn = j;\n\t                }\n\t            }\n\t            // the matrix here is the transpose of the common Augmented matrix.\n\t            //  so the can perform the primary column transform, in fact, equivalent\n\t            //  to the primary line changes\n\t            for (var k = i; k < matrix.length; k++) {\n\t                var temp = matrix[k][i];\n\t                matrix[k][i] = matrix[k][maxColumn];\n\t                matrix[k][maxColumn] = temp;\n\t            }\n\t            for (var n = i + 1; n < matrix.length - 1; n++) {\n\t                for (var m = matrix.length - 1; m >= i; m--) {\n\t                    matrix[m][n] -= matrix[m][i] / matrix[i][i] * matrix[i][n];\n\t                }\n\t            }\n\t        }\n\n\t        var data = new Array(number);\n\t        var len = matrix.length - 1;\n\t        for (var j = matrix.length - 2; j >= 0; j--) {\n\t            var temp = 0;\n\t            for (var i = j + 1; i < matrix.length - 1; i++) {\n\t                temp += matrix[i][j] * data[i];\n\t            }\n\t            data[j] = (matrix[len][j] - temp) / matrix[j][j];\n\n\t        }\n\n\t        return data;\n\t    }\n\n\t    var regression = function (regreMethod, data, order) {\n\n\t        return regreMethods[regreMethod](data, order);\n\n\t    };\n\n\t    return regression;\n\n\t}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n/***/ }),\n/* 6 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require) {\n\n\t    var statistics = {};\n\n\t    statistics.max = __webpack_require__(7);\n\t    statistics.deviation = __webpack_require__(8);\n\t    statistics.mean = __webpack_require__(10);\n\t    statistics.median = __webpack_require__(12);\n\t    statistics.min = __webpack_require__(14);\n\t    statistics.quantile = __webpack_require__(13);\n\t    statistics.sampleVariance = __webpack_require__(9);\n\t    statistics.sum = __webpack_require__(11);\n\n\t    return statistics;\n\n\t}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n/***/ }),\n/* 7 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require) {\n\n\t    var number = __webpack_require__(4);\n\t    var isNumber = number.isNumber;\n\n\t    /**\n\t     * Is a method for computing the max value of a list of numbers,\n\t     * which will filter other data types.\n\t     * @param  {Array.<number>} data\n\t     * @return {number}\n\t     */\n\t    function max(data) {\n\n\t        var maxData = -Infinity;\n\t        for (var i = 0; i < data.length; i++) {\n\t            if (isNumber(data[i]) && data[i] > maxData) {\n\t                maxData = data[i];\n\t            }\n\t        }\n\t        return maxData;\n\t    }\n\n\t    return max;\n\n\t}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n/***/ }),\n/* 8 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require) {\n\n\t    var variance = __webpack_require__(9);\n\n\t    /**\n\t     * Computing the deviation\n\t     * @param  {Array.<number>} data\n\t     * @return {number}\n\t     */\n\t    return function (data) {\n\n\t        var squaredDeviation = variance(data);\n\n\t        return squaredDeviation ? Math.sqrt(squaredDeviation) : squaredDeviation;\n\t    };\n\t}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n/***/ }),\n/* 9 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require) {\n\n\t    var number = __webpack_require__(4);\n\t    var isNumber = number.isNumber;\n\t    var mean = __webpack_require__(10);\n\n\t    /**\n\t     * Computing the variance of list of sample\n\t     * @param  {Array.<number>} data\n\t     * @return {number}\n\t     */\n\t    function sampleVariance(data) {\n\n\t        var len = data.length;\n\t        if (!len || len < 2) {\n\t            return 0;\n\t        }\n\t        if (data.length >= 2) {\n\n\t            var meanValue = mean(data);\n\t            var sum = 0;\n\t            var temple;\n\n\t            for (var i = 0; i < data.length; i++) {\n\t                if (isNumber(data[i])) {\n\t                    temple = data[i] - meanValue;\n\t                    sum += temple * temple;\n\t                }\n\t            }\n\t            return sum / (data.length - 1);\n\t        }\n\t    }\n\n\t    return sampleVariance;\n\n\t}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n/***/ }),\n/* 10 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require) {\n\n\t    var sum = __webpack_require__(11);\n\n\t    /**\n\t     * Is a method for computing the mean value of a list of numbers,\n\t     * which will filter other data types.\n\t     * @param  {Array.<number>} data\n\t     * @return {number}\n\t     */\n\t    function mean(data) {\n\n\t        var len = data.length;\n\n\t        if (!len) {\n\t            return 0;\n\t        }\n\n\t        return sum(data) / data.length;\n\n\t    }\n\n\t    return mean;\n\n\n\t}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n/***/ }),\n/* 11 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require) {\n\n\t    var number = __webpack_require__(4);\n\t    var isNumber = number.isNumber;\n\n\t    /**\n\t     * Is a method for computing the sum of a list of numbers,\n\t     * which will filter other data types.\n\t     * @param  {Array.<number>} data\n\t     * @return {number}\n\t     */\n\t    function sum(data) {\n\n\t        var len = data.length;\n\n\t        if (!len) {\n\t            return 0;\n\t        }\n\t        var sumData = 0;\n\t        for (var i = 0; i < len; i++) {\n\t            if (isNumber(data[i])) {\n\t                sumData += data[i];\n\t            }\n\t        }\n\t        return sumData;\n\t    }\n\n\t    return sum;\n\n\t}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n/***/ }),\n/* 12 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require) {\n\n\t    var quantile = __webpack_require__(13);\n\n\t    /**\n\t     * Is a method for computing the median value of a sorted array of numbers\n\t     * @param  {Array.<number>} data\n\t     * @return {number}\n\t     */\n\t    function median(data) {\n\n\t        return quantile(data, 0.5);\n\t    }\n\n\t    return median;\n\n\t}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n/***/ }),\n/* 13 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require) {\n\n\t    /**\n\t     * Estimating quantiles from a sorted sample of numbers\n\t     * @see https://en.wikipedia.org/wiki/Quantile#Estimating_quantiles_from_a_sample\n\t     * R-7 method\n\t     * @param  {Array.<number>} data  sorted array\n\t     * @param  {number} p\n\t     */\n\t    return function (data, p) {\n\n\t        var len = data.length;\n\n\t        if (!len) {\n\t            return 0;\n\t        }\n\t        if (p <= 0 || len < 2) {\n\t            return data[0];\n\t        }\n\t        if (p >= 1) {\n\t            return data[len -1];\n\t        }\n\t        // in the wikipedia's R-7 method h = (N - 1)p + 1, but here array index start from 0\n\t        var h = (len - 1) * p;\n\t        var i = Math.floor(h);\n\t        var a = data[i];\n\t        var b = data[i + 1];\n\t        return a + (b - a) * (h - i);\n\t    };\n\n\t}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n/***/ }),\n/* 14 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require) {\n\n\t    var number = __webpack_require__(4);\n\t    var isNumber = number.isNumber;\n\n\t    /**\n\t     * Is a method for computing the min value of a list of numbers,\n\t     * which will filter other data types.\n\t     * @param  {Array.<number>} data\n\t     * @return {number}\n\t     */\n\t    function min(data) {\n\n\t        var minData = Infinity;\n\t        for (var i = 0; i < data.length; i++) {\n\t            if (isNumber(data[i]) && data[i] < minData) {\n\t                minData = data[i];\n\t            }\n\t        }\n\t        return minData;\n\t    }\n\n\t    return min;\n\n\t}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n/***/ }),\n/* 15 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require) {\n\n\t    var max = __webpack_require__(7);\n\t    var min = __webpack_require__(14);\n\t    var quantile = __webpack_require__(13);\n\t    var deviation = __webpack_require__(8);\n\t    var dataProcess = __webpack_require__(2);\n\t    var dataPreprocess = dataProcess.dataPreprocess;\n\t    var getPrecision = dataProcess.getPrecision;\n\t    var array = __webpack_require__(3);\n\t    var ascending = array.ascending;\n\t    var map = array.map;\n\t    var range = __webpack_require__(16);\n\t    var bisect = array.bisect;\n\t    var tickStep = __webpack_require__(17);\n\n\t    /**\n\t     * Compute bins for histogram\n\t     * @param  {Array.<number>} data\n\t     * @param  {string} threshold\n\t     * @return {Object}\n\t     */\n\t    function computeBins(data, threshold) {\n\n\t        if (threshold == null) {\n\t            threshold = thresholdMethod.squareRoot;\n\t        }\n\t        else {\n\t            threshold = thresholdMethod[threshold];\n\t        }\n\t        var values = dataPreprocess(data);\n\t        var maxValue = max(values);\n\t        var minValue = min(values);\n\t        var binsNumber = threshold(values, minValue, maxValue);\n\t        var step = tickStep(minValue, maxValue, binsNumber);\n\t        var precision = -Math.floor(Math.log(Math.abs(maxValue - minValue) / binsNumber) / Math.LN10);\n\t        \n\t        // return the xAxis coordinate for each bins, except the end point of the value\n\t        var rangeArray = range(\n\t                // use function toFixed() to avoid data like '0.700000001'\n\t                +((Math.ceil(minValue / step) * step).toFixed(precision)),\n\t                +((Math.floor(maxValue / step) * step).toFixed(precision)),\n\t                step,\n\t                precision\n\t            );\n\n\t        var len = rangeArray.length;\n\n\t        var bins = new Array(len + 1);\n\n\t        for (var i = 0; i <= len; i++) {\n\t            bins[i] = {};\n\t            bins[i].sample = [];\n\t            bins[i].x0 = i > 0 \n\t                ? rangeArray[i - 1]\n\t                : (rangeArray[i] - minValue) === step\n\t                ? minValue\n\t                : (rangeArray[i] - step);\n\t            bins[i].x1 = i < len\n\t                ? rangeArray[i]\n\t                : (maxValue - rangeArray[i-1]) === step\n\t                ? maxValue\n\t                : rangeArray[i - 1] + step;\n\t        }\n\n\t        for (var i = 0; i < values.length; i++) {\n\t            if (minValue <= values[i] && values[i] <= maxValue) {\n\t                bins[bisect(rangeArray, values[i], 0, len)].sample.push(values[i]);\n\t            }\n\t        }\n\n\t        var data = map(bins, function (bin) {\n\t            // use function toFixed() to avoid data like '6.5666638489'\n\t            return [+((bin.x0 + bin.x1) / 2).toFixed(precision), bin.sample.length];\n\t        });\n\n\t        var customData = map(bins, function (bin) {\n\t            return [bin.x0, bin.x1, bin.sample.length];\n\t        });\n\n\t        return {\n\t            bins: bins,\n\t            data: data,\n\t            customData: customData\n\t        };\n\t    }\n\n\t    /**\n\t     * Four kinds of threshold methods used to\n\t     * compute how much bins the histogram should be divided\n\t     * @see  https://en.wikipedia.org/wiki/Histogram\n\t     * @type {Object}\n\t     */\n\t    var thresholdMethod = {\n\n\t        squareRoot: function (data) {\n\n\t            var bins = Math.ceil(Math.sqrt(data.length));\n\n\t            return bins > 50 ? 50 : bins;\n\t        },\n\n\t        scott: function (data, min, max) {\n\n\t            return Math.ceil((max - min) / (3.5 * deviation(data) * Math.pow(data.length, -1 / 3)));\n\t        },\n\n\t        freedmanDiaconis: function (data, min, max) {\n\n\t            data.sort(ascending);\n\n\t            return Math.ceil(\n\t                (max - min) / (2 * (quantile(data, 0.75) - quantile(data, 0.25)) * Math.pow(data.length, -1 / 3))\n\t            );\n\t        },\n\n\t        sturges: function (data) {\n\n\t            return Math.ceil(Math.log(data.length) / Math.LN2) + 1;\n\n\t        }\n\t    };\n\n\t    return computeBins;\n\n\t}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n/***/ }),\n/* 16 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require) {\n\n\t    var dataProcess = __webpack_require__(2);\n\t    var getPrecision = dataProcess.getPrecision;\n\n\t    /**\n\t     * Computing range array.\n\t     * Adding param precision to fix range value, avoiding range[i] = 0.7000000001.\n\t     * @param  {number} start\n\t     * @param  {number} end\n\t     * @param  {number} step\n\t     * @param  {number} precision\n\t     * @return {Array.<number>}\n\t     */\n\t    return function (start, end, step, precision) {\n\n\t        var len = arguments.length;\n\n\t        if (len < 2) {\n\t            end = start;\n\t            start = 0;\n\t            step = 1;\n\t        }\n\t        else if (len < 3) {\n\t            step = 1;\n\t        }\n\t        else if (len < 4) {\n\t            step = +step;\n\t            precision = getPrecision(step);\n\t        }\n\t        else {\n\t            precision = +precision;\n\t        }\n\n\t        var n = Math.ceil(((end - start) / step).toFixed(precision));\n\t        var range = new Array(n + 1);\n\t        for (var i = 0; i < n + 1; i++) {\n\t            range[i] = +(start + i * step).toFixed(precision);\n\t        }\n\t        return range;\n\t    };\n\n\t}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n/***/ }),\n/* 17 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require) {\n\n\t    /**\n\t     * Computing the length of step\n\t     * @see  https://github.com/d3/d3-array/blob/master/src/ticks.js\n\t     * @param {number} start\n\t     * @param {number} stop\n\t     * @param {number} count\n\t     */\n\t    return function (start, stop, count) {\n\n\t        var step0 = Math.abs(stop - start) / count;\n\t        var precision = Math.floor(Math.log(step0) / Math.LN10);\n\t        var step1 = Math.pow(10, precision);\n\t        var error = step0 / step1;\n\n\t        if (error >= Math.sqrt(50)) {\n\t            step1 *= 10;\n\t        }\n\t        else if (error >= Math.sqrt(10)) {\n\t            step1 *= 5;\n\t        }\n\t        else if(error >= Math.sqrt(2)) {\n\t            step1 *= 2;\n\t        }\n\t        return +((stop >= start ? step1 : -step1).toFixed(-precision));\n\n\t    };\n\n\t}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n/***/ })\n/******/ ])\n});\n;\n\n/***/ }),\n\n/***/ \"KpO7\":\n/***/ (function(module, exports, __webpack_require__) {\n\nvar $parseInt = __webpack_require__(\"7KvD\").parseInt;\nvar $trim = __webpack_require__(\"mnVu\").trim;\nvar ws = __webpack_require__(\"hyta\");\nvar hex = /^[-+]?0[xX]/;\n\nmodule.exports = $parseInt(ws + '08') !== 8 || $parseInt(ws + '0x16') !== 22 ? function parseInt(str, radix) {\n  var string = $trim(String(str), 3);\n  return $parseInt(string, (radix >>> 0) || (hex.test(string) ? 16 : 10));\n} : $parseInt;\n\n\n/***/ }),\n\n/***/ \"QxJS\":\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\nObject.defineProperty(__webpack_exports__, \"__esModule\", { value: true });\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_babel_runtime_core_js_number_parse_int__ = __webpack_require__(\"gBtx\");\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_babel_runtime_core_js_number_parse_int___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_babel_runtime_core_js_number_parse_int__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_echarts__ = __webpack_require__(\"XLwt\");\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_echarts___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_echarts__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_echarts_stat__ = __webpack_require__(\"siuG\");\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_echarts_stat___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2_echarts_stat__);\n\n\n\n\n\nvar initData = function initData(length) {\n  var array = [];\n  for (var i = 0; i < length; i++) {\n    array.push([i, '']);\n  }\n  return array;\n};\nvar fetchData = function fetchData(data) {\n  var array = [];\n  for (var i = 0, l = data.length; i < l; i++) {\n    if (data[i][1]) {\n      array.push(data[i]);\n    } else {\n      break;\n    }\n  }\n  return array;\n};\n/* harmony default export */ __webpack_exports__[\"default\"] = ({\n  name: 'chart2',\n  data: function data() {\n    return {\n      data: [],\n      length: 12,\n      trueLength: 12\n    };\n  },\n\n  methods: {\n    reset: function reset() {\n      console.log(this.length);\n      this.trueLength = __WEBPACK_IMPORTED_MODULE_0_babel_runtime_core_js_number_parse_int___default()(this.length);\n      this.data = initData(this.trueLength);\n    },\n    indexChange: function indexChange(number, index) {\n      number = __WEBPACK_IMPORTED_MODULE_0_babel_runtime_core_js_number_parse_int___default()(number);\n      this.data = this.data.map(function (item, i) {\n        if (i > index) {\n          item[0] = number + i - index;\n          return item;\n        } else {\n          return item;\n        }\n      });\n    },\n    initCharts: function initCharts() {\n      var target = fetchData(this.data);\n      var myRegression = __WEBPACK_IMPORTED_MODULE_2_echarts_stat___default.a.regression('polynomial', target, 3);\n      myRegression.points.sort(function (a, b) {\n        return a[0] - b[0];\n      });\n\n      var myCharts = __WEBPACK_IMPORTED_MODULE_1_echarts___default.a.init(document.getElementById('chartsCtn'));\n      myCharts.setOption({\n        toolbox: {\n          feature: {\n            saveAsImage: {}\n          }\n        },\n        xAxis: {\n          type: 'value',\n          splitLine: {\n            lineStyle: {\n              type: 'dashed'\n            }\n          },\n          max: 'dataMax',\n          min: 'dataMin'\n        },\n        yAxis: {\n          type: 'value',\n          splitLine: {\n            lineStyle: {\n              type: 'dashed'\n            }\n          },\n          max: 'dataMax',\n          min: 'dataMin'\n        },\n        series: [{\n          name: 'data',\n          type: 'line',\n          data: target\n        }, {\n          name: 'standard',\n          type: 'line',\n          data: myRegression.points,\n          markPoint: {\n            itemStyle: {\n              normal: {\n                color: 'transparent'\n              }\n            },\n            label: {\n              normal: {\n                show: true,\n                position: 'left',\n                formatter: myRegression.expression,\n                textStyle: {\n                  color: '#333',\n                  fontSize: 14\n                }\n              }\n            },\n            data: [{\n              coord: myRegression.points[myRegression.points.length - 1]\n            }]\n          }\n        }]\n      });\n    }\n  },\n  created: function created() {\n    this.data = initData(this.length);\n  }\n});\n\n/***/ }),\n\n/***/ \"YNOL\":\n/***/ (function(module, exports, __webpack_require__) {\n\n\n/* styles */\n__webpack_require__(\"oB8E\")\n\nvar Component = __webpack_require__(\"VU/8\")(\n  /* script */\n  __webpack_require__(\"QxJS\"),\n  /* template */\n  __webpack_require__(\"zXSq\"),\n  /* scopeId */\n  \"data-v-24fbfa86\",\n  /* cssModules */\n  null\n)\n\nmodule.exports = Component.exports\n\n\n/***/ }),\n\n/***/ \"gBtx\":\n/***/ (function(module, exports, __webpack_require__) {\n\nmodule.exports = { \"default\": __webpack_require__(\"qrpI\"), __esModule: true };\n\n/***/ }),\n\n/***/ \"hyta\":\n/***/ (function(module, exports) {\n\nmodule.exports = '\\x09\\x0A\\x0B\\x0C\\x0D\\x20\\xA0\\u1680\\u180E\\u2000\\u2001\\u2002\\u2003' +\n  '\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200A\\u202F\\u205F\\u3000\\u2028\\u2029\\uFEFF';\n\n\n/***/ }),\n\n/***/ \"iEFX\":\n/***/ (function(module, exports, __webpack_require__) {\n\nexports = module.exports = __webpack_require__(\"FZ+f\")();\n// imports\n\n\n// module\nexports.push([module.i, \"\\n.chart2[data-v-24fbfa86] {\\n  display: -ms-flexbox;\\n  display: flex;\\n  -ms-flex-direction: column;\\n      flex-direction: column;\\n  height: 100%;\\n}\\n.chart2 input[data-v-24fbfa86] {\\n    text-align: center !important;\\n}\\n.chart-ctn[data-v-24fbfa86] {\\n  height: 480px;\\n  width: 100%;\\n}\\n\", \"\", {\"version\":3,\"sources\":[\"D:/Project/footballadvice/src/components/Chart2.vue\"],\"names\":[],\"mappings\":\";AACA;EACE,qBAAqB;EACrB,cAAc;EACd,2BAA2B;MACvB,uBAAuB;EAC3B,aAAa;CACd;AACD;IACI,8BAA8B;CACjC;AACD;EACE,cAAc;EACd,YAAY;CACb\",\"file\":\"Chart2.vue\",\"sourcesContent\":[\"\\n.chart2[data-v-24fbfa86] {\\n  display: -ms-flexbox;\\n  display: flex;\\n  -ms-flex-direction: column;\\n      flex-direction: column;\\n  height: 100%;\\n}\\n.chart2 input[data-v-24fbfa86] {\\n    text-align: center !important;\\n}\\n.chart-ctn[data-v-24fbfa86] {\\n  height: 480px;\\n  width: 100%;\\n}\\n\"],\"sourceRoot\":\"\"}]);\n\n// exports\n\n\n/***/ }),\n\n/***/ \"mnVu\":\n/***/ (function(module, exports, __webpack_require__) {\n\nvar $export = __webpack_require__(\"kM2E\");\nvar defined = __webpack_require__(\"52gC\");\nvar fails = __webpack_require__(\"S82l\");\nvar spaces = __webpack_require__(\"hyta\");\nvar space = '[' + spaces + ']';\nvar non = '\\u200b\\u0085';\nvar ltrim = RegExp('^' + space + space + '*');\nvar rtrim = RegExp(space + space + '*$');\n\nvar exporter = function (KEY, exec, ALIAS) {\n  var exp = {};\n  var FORCE = fails(function () {\n    return !!spaces[KEY]() || non[KEY]() != non;\n  });\n  var fn = exp[KEY] = FORCE ? exec(trim) : spaces[KEY];\n  if (ALIAS) exp[ALIAS] = fn;\n  $export($export.P + $export.F * FORCE, 'String', exp);\n};\n\n// 1 -> String#trimLeft\n// 2 -> String#trimRight\n// 3 -> String#trim\nvar trim = exporter.trim = function (string, TYPE) {\n  string = String(defined(string));\n  if (TYPE & 1) string = string.replace(ltrim, '');\n  if (TYPE & 2) string = string.replace(rtrim, '');\n  return string;\n};\n\nmodule.exports = exporter;\n\n\n/***/ }),\n\n/***/ \"oB8E\":\n/***/ (function(module, exports, __webpack_require__) {\n\n// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = __webpack_require__(\"iEFX\");\nif(typeof content === 'string') content = [[module.i, content, '']];\nif(content.locals) module.exports = content.locals;\n// add the styles to the DOM\nvar update = __webpack_require__(\"rjj0\")(\"1d670648\", content, true);\n\n/***/ }),\n\n/***/ \"qrpI\":\n/***/ (function(module, exports, __webpack_require__) {\n\n__webpack_require__(\"8sHD\");\nmodule.exports = __webpack_require__(\"FeBl\").Number.parseInt;\n\n\n/***/ }),\n\n/***/ \"siuG\":\n/***/ (function(module, exports, __webpack_require__) {\n\nmodule.exports = __webpack_require__(\"GY9q\");\n\n\n/***/ }),\n\n/***/ \"zXSq\":\n/***/ (function(module, exports) {\n\nmodule.exports={render:function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _c('div', {\n    staticClass: \"chart2\",\n    attrs: {\n      \"name\": \"Chart2\"\n    }\n  }, [_c('div', {\n    staticClass: \"data-area\"\n  }, [_c('div', {\n    staticClass: \"clearfix\"\n  }, _vm._l((_vm.trueLength), function(item, index) {\n    return _c('div', {\n      key: index,\n      staticClass: \"form-group col-xs-3 col-md-3\"\n    }, [_c('input', {\n      directives: [{\n        name: \"model\",\n        rawName: \"v-model\",\n        value: (_vm.data[index][0]),\n        expression: \"data[index][0]\"\n      }],\n      staticClass: \"form-control\",\n      attrs: {\n        \"type\": \"number\"\n      },\n      domProps: {\n        \"value\": (_vm.data[index][0])\n      },\n      on: {\n        \"keyup\": function($event) {\n          if (!('button' in $event) && _vm._k($event.keyCode, \"enter\", 13, $event.key, \"Enter\")) { return null; }\n          _vm.indexChange(_vm.data[index][0], index)\n        },\n        \"input\": function($event) {\n          if ($event.target.composing) { return; }\n          _vm.$set(_vm.data[index], 0, $event.target.value)\n        }\n      }\n    }), _c('input', {\n      directives: [{\n        name: \"model\",\n        rawName: \"v-model\",\n        value: (_vm.data[index][1]),\n        expression: \"data[index][1]\"\n      }],\n      staticClass: \"form-control\",\n      attrs: {\n        \"type\": \"number\"\n      },\n      domProps: {\n        \"value\": (_vm.data[index][1])\n      },\n      on: {\n        \"input\": function($event) {\n          if ($event.target.composing) { return; }\n          _vm.$set(_vm.data[index], 1, $event.target.value)\n        }\n      }\n    })])\n  })), _vm._v(\" \"), _c('div', {\n    staticClass: \"clearfix\"\n  }, [_c('div', {\n    staticClass: \"form-group col-xs-12 col-md-12\"\n  }, [_c('label', [_vm._v(\"Length\")]), _vm._v(\" \"), _c('input', {\n    directives: [{\n      name: \"model\",\n      rawName: \"v-model\",\n      value: (_vm.length),\n      expression: \"length\"\n    }],\n    attrs: {\n      \"type\": \"text\",\n      \"maxlength\": \"2\"\n    },\n    domProps: {\n      \"value\": (_vm.length)\n    },\n    on: {\n      \"keyup\": function($event) {\n        if (!('button' in $event) && _vm._k($event.keyCode, \"enter\", 13, $event.key, \"Enter\")) { return null; }\n        return _vm.reset($event)\n      },\n      \"input\": function($event) {\n        if ($event.target.composing) { return; }\n        _vm.length = $event.target.value\n      }\n    }\n  }), _vm._v(\" \"), _c('button', {\n    staticClass: \"btn btn-sm btn-info\",\n    on: {\n      \"click\": _vm.reset\n    }\n  }, [_vm._v(\"Reset\")]), _vm._v(\" \"), _c('button', {\n    staticClass: \"btn btn-sm btn-success\",\n    on: {\n      \"click\": _vm.initCharts\n    }\n  }, [_vm._v(\"Paint\")])])])]), _vm._v(\" \"), _c('div', {\n    staticClass: \"chart-ctn\",\n    attrs: {\n      \"id\": \"chartsCtn\"\n    }\n  })])\n},staticRenderFns: []}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// static/js/0.42e76f892b85fa0e30a5.js","var $export = require('./_export');\nvar $parseInt = require('./_parse-int');\n// 20.1.2.13 Number.parseInt(string, radix)\n$export($export.S + $export.F * (Number.parseInt != $parseInt), 'Number', { parseInt: $parseInt });\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/core-js/library/modules/es6.number.parse-int.js\n// module id = 8sHD\n// module chunks = 0","(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"ecStat\"] = factory();\n\telse\n\t\troot[\"ecStat\"] = factory();\n})(this, function() {\nreturn /******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n\n\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require) {\n\n\t    return {\n\n\t        clustering: __webpack_require__(1),\n\t        regression: __webpack_require__(5),\n\t        statistics: __webpack_require__(6),\n\t        histogram: __webpack_require__(15)\n\n\t    };\n\n\t}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n/***/ }),\n/* 1 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require) {\n\n\t    var dataProcess = __webpack_require__(2);\n\t    var dataPreprocess = dataProcess.dataPreprocess;\n\t    var array = __webpack_require__(3);\n\t    var arraySize = array.size;\n\t    var sumOfColumn = array.sumOfColumn;\n\t    var arraySum = array.sum;\n\t    var zeros = array.zeros;\n\t    var isArray = array.isArray;\n\t    var mathSqrt = Math.sqrt;\n\t    var mathPow = Math.pow;\n\n\t    /**\n\t     * KMeans of clustering algorithm\n\t     * @param  {Array.<Array.<number>>} data  two-dimension array\n\t     * @param  {number} k   the number of clusters in a dataset\n\t     * @return {Object}\n\t     */\n\t    function kMeans(data, k) {\n\n\t        var size = arraySize(data);\n\t        // create array to assign data points to centroids, also holds SE of each point\n\t        var clusterAssigned = zeros(size[0], 2);\n\t        var centroids = createRandCent(data, k);\n\t        var clusterChanged = true;\n\t        var minDist;\n\t        var minIndex;\n\t        var distIJ;\n\t        var ptsInClust;\n\n\t        while (clusterChanged) {\n\t            clusterChanged = false;\n\t            for (var i = 0; i < size[0]; i++) {\n\t                minDist = Infinity;\n\t                minIndex = -1;\n\t                for (var j = 0; j < k; j++) {\n\t                    distIJ = distEuclid(data[i], centroids[j]);\n\t                    if (distIJ < minDist) {\n\t                        minDist = distIJ;\n\t                        minIndex = j;\n\t                    }\n\t                }\n\t                if (clusterAssigned[i][0] !== minIndex) {\n\t                    clusterChanged = true;\n\t                }\n\t                clusterAssigned[i][0] = minIndex;\n\t                clusterAssigned[i][1] = mathPow(minDist, 2);\n\t            }\n\t            //recalculate centroids\n\t            for (var i = 0; i < k; i++) {\n\t                ptsInClust = [];\n\t                for (var j = 0; j < clusterAssigned.length; j++) {\n\t                    if (clusterAssigned[j][0] === i) {\n\t                        ptsInClust.push(data[j]);\n\t                    }\n\t                }\n\t                centroids[i] = meanInColumns(ptsInClust);\n\t            }\n\t        }\n\n\t        var clusterWithKmeans = {\n\t            centroids: centroids,\n\t            clusterAssigned: clusterAssigned\n\t        };\n\t        return clusterWithKmeans;\n\t    }\n\n\t    /**\n\t     * Calculate the average of each column in a two-dimensional array\n\t     *  and returns the values as an array.\n\t     * @param  {Array.<Array>} dataList two-dimensional array\n\t     * @return {Array}\n\t     */\n\t    function meanInColumns(dataList) {\n\n\t        var size = arraySize(dataList);\n\t        var meanArray = [];\n\t        var sum;\n\t        var mean;\n\t        for (var j = 0; j < size[1]; j++) {\n\t            sum = 0;\n\t            for (var i = 0; i < size[0]; i++) {\n\t                sum += dataList[i][j];\n\t            }\n\t            mean = sum / size[0];\n\t            meanArray.push(mean);\n\t        }\n\t        return meanArray;\n\t    }\n\n\t    /**\n\t     * The combine of hierarchical clustering and k-means.\n\t     * @param  {Array} data   two-dimension array.\n\t     * @param  {[type]} k   the number of clusters in a dataset. It has to be greater than 1.\n\t     * @param  {boolean}  stepByStep\n\t     * @return {}\n\t     */\n\t    function hierarchicalKMeans(data, k, stepByStep) {\n\t        if (k < 2 ) {\n\t            return;\n\t        }\n\t        var dataSet = dataPreprocess(data);\n\t        var size = arraySize(dataSet);\n\t        var clusterAssment = zeros(size[0], 2);\n\t        // initial center point\n\t        var centroid0 = meanInColumns(dataSet);\n\t        var centList = [centroid0];\n\t        var squareError;\n\t        for (var i = 0; i < size[0]; i++) {\n\t            squareError = distEuclid(dataSet[i], centroid0);\n\t            clusterAssment[i][1] = mathPow(squareError, 2);\n\t        }\n\t        var lowestSSE;\n\t        var ptsInClust;\n\t        var ptsNotClust;\n\t        var clusterInfo;\n\t        var sseSplit;\n\t        var sseNotSplit;\n\t        var index = 1;\n\t        var result = {\n\t            isEnd: false\n\t        };\n\n\t        function oneStep() {\n\t            //the existing clusters are continuously divided\n\t            //until the number of clusters is k\n\t            if (index < k) {\n\t                lowestSSE = Infinity;\n\t                var centSplit;\n\t                var newCentroid;\n\t                var newClusterAss;\n\n\t                for (var j = 0; j < centList.length; j++) {\n\t                    ptsInClust = [];\n\t                    ptsNotClust = [];\n\t                    for (var i = 0; i < clusterAssment.length; i++) {\n\t                        if (clusterAssment[i][0] === j) {\n\t                            ptsInClust.push(dataSet[i]);\n\t                        }\n\t                        else {\n\t                            ptsNotClust.push(clusterAssment[i][1]);\n\t                        }\n\t                    }\n\t                    clusterInfo = kMeans(ptsInClust, 2);\n\t                    sseSplit = sumOfColumn(clusterInfo.clusterAssigned, 1);\n\t                    sseNotSplit = arraySum(ptsNotClust);\n\t                    if (sseSplit + sseNotSplit < lowestSSE) {\n\t                        lowestSSE = sseNotSplit + sseSplit;\n\t                        centSplit = j;\n\t                        newCentroid = clusterInfo.centroids;\n\t                        newClusterAss = clusterInfo.clusterAssigned;\n\t                    }\n\t                }\n\n\t                for (var i = 0; i < newClusterAss.length; i++) {\n\t                    if (newClusterAss[i][0] === 0) {\n\t                        newClusterAss[i][0] = centSplit;\n\t                    }\n\t                    else if (newClusterAss[i][0] === 1) {\n\t                        newClusterAss[i][0] = centList.length;\n\t                    }\n\t                }\n\n\t                centList[centSplit] = newCentroid[0];\n\t                centList.push(newCentroid[1]);\n\t                for ( i = 0, j = 0; i < clusterAssment.length && j < newClusterAss.length; i++) {\n\t                    if (clusterAssment[i][0] === centSplit) {\n\t                        clusterAssment[i][0] = newClusterAss[j][0];\n\t                        clusterAssment[i][1] = newClusterAss[j++][1];\n\t                    }\n\t                }\n\n\t                var pointInClust = [];\n\t                for (var i = 0; i < centList.length; i++) {\n\t                    pointInClust[i] = [];\n\t                    for (var j = 0; j < clusterAssment.length; j++) {\n\t                        if (clusterAssment[j][0] === i) {\n\t                            pointInClust[i].push(dataSet[j]);\n\t                        }\n\t                    }\n\t                }\n\n\t                result.clusterAssment = clusterAssment;\n\t                result.centroids = centList;\n\t                result.pointsInCluster = pointInClust;\n\n\n\t                index++;\n\t            }\n\t            else {\n\t                result.isEnd = true;\n\t            }\n\n\t            return result;\n\t        }\n\n\t        var step = {\n\t            next: oneStep\n\t        };\n\n\t        if (!stepByStep) {\n\t            var result;\n\t            while (!(result = step.next()).isEnd);\n\t            return result;\n\t        }\n\t        else {\n\t            return step;\n\t        }\n\n\t    }\n\n\t    /**\n\t     * Create random centroid of kmeans.\n\t     * @param  {Array.<number>} dataSet  two-dimension array\n\t     * @param  {number} k   the number of centroids to be created\n\t     * @return {Array.<number>}   random centroids of kmeans\n\t     */\n\t    function createRandCent(dataSet, k) {\n\t        var size = arraySize(dataSet);\n\t        //constructs a two-dimensional array with all values 0\n\t        var centroids = zeros(k, size[1]);\n\t        var minJ;\n\t        var maxJ;\n\t        var rangeJ;\n\t        //create random cluster centers, within bounds of each dimension\n\t        for (var j = 0; j < size[1]; j++) {\n\t            minJ = dataSet[0][j];\n\t            maxJ = dataSet[0][j];\n\t            for (var i = 1; i < size[0]; i++) {\n\t                if (dataSet[i][j] < minJ) {\n\t                    minJ = dataSet[i][j];\n\t                }\n\t                if (dataSet[i][j] > maxJ) {\n\t                    maxJ = dataSet[i][j];\n\t                }\n\t            }\n\t            rangeJ = maxJ - minJ;\n\t            for (var i = 0; i < k; i++) {\n\t                centroids[i][j] = minJ + rangeJ * Math.random();\n\t            }\n\t        }\n\t        return centroids;\n\t    }\n\n\t    /**\n\t     * Distance method for calculating similarity\n\t     * @param  {Array.<number>}  vec1\n\t     * @param  {Array.<nnumber>}  vec2\n\t     * @return {number}\n\t     */\n\t    function distEuclid(vec1, vec2) {\n\n\t        if (!isArray(vec1) && !isArray(vec2)) {\n\t            return mathSqrt(mathPow(vec1 - vec2, 2));\n\t        }\n\n\t        var powerSum = 0;\n\t        //subtract the corresponding elements in the vectors\n\t        for (var i = 0; i < vec1.length; i++) {\n\t            powerSum += mathPow(vec1[i] - vec2[i], 2);\n\t        }\n\n\t        return mathSqrt(powerSum);\n\t    }\n\n\t    return {\n\t        kMeans: kMeans,\n\t        hierarchicalKMeans: hierarchicalKMeans\n\t    };\n\n\t}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n/***/ }),\n/* 2 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require) {\n\n\t    var array = __webpack_require__(3);\n\t    var isArray = array.isArray;\n\t    var size = array.size;\n\t    var number = __webpack_require__(4);\n\t    var isNumber = number.isNumber;\n\n\t    /**\n\t     * Data preprocessing, filter the wrong data object.\n\t     *  for example [12,] --- missing y value\n\t     *              [,12] --- missing x value\n\t     *              [12, b] --- incorrect y value\n\t     *              ['a', 12] --- incorrect x value\n\t     * @param  {Array.<Array>} data\n\t     * @return {Array.<Array.<number>>}\n\t     */\n\t    function dataPreprocess(data) {\n\n\t        if (!isArray(data)) {\n\t            throw new Error('Invalid data type, you should input an array');\n\t        }\n\t        var predata = [];\n\t        var arraySize = size(data);\n\n\t        if (arraySize.length === 1) {\n\n\t            for (var i = 0; i < arraySize[0]; i++) {\n\n\t                if (isNumber(data[i])) {\n\t                    predata.push(data[i]);\n\t                }\n\t            }\n\t        }\n\t        else if (arraySize.length === 2) {\n\n\t            for (var i = 0; i < arraySize[0]; i++) {\n\n\t                var isCorrect = true;\n\t                for (var j = 0; j < arraySize[1]; j++) {\n\t                    if (!isNumber(data[i][j])) {\n\t                        isCorrect = false;\n\t                    }\n\t                }\n\t                if (isCorrect) {\n\t                    predata.push(data[i]);\n\t                }\n\t            }\n\t        }\n\t        return predata;\n\t    }\n\n\t    /**\n\t     * @param {string|number} val\n\t     * @return {number}\n\t     */\n\t    function getPrecision(val) {\n\t        var str = val.toString();\n\t        // scientific notation is not considered\n\t        var dotIndex = str.indexOf('.');\n\t        return dotIndex < 0 ? 0 : str.length - 1 - dotIndex;\n\t    }\n\n\t    return {\n\t        dataPreprocess: dataPreprocess,\n\t        getPrecision: getPrecision\n\t    };\n\n\t}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n/***/ }),\n/* 3 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require) {\n\n\t    var objToString = Object.prototype.toString;\n\t    var arrayProto = Array.prototype;\n\t    var nativeMap = arrayProto.map;\n\n\t    /**\n\t     * Get the size of a array\n\t     * @param  {Array} data\n\t     * @return {Array}\n\t     */\n\t    function size(data) {\n\t        var s = [];\n\t        while (isArray(data)) {\n\t            s.push(data.length);\n\t            data = data[0];\n\t        }\n\t        return s;\n\t    }\n\n\t    /**\n\t     * @param {*}  value\n\t     * @return {boolean}\n\t     */\n\t    function isArray(value) {\n\t        return objToString.call(value) === '[object Array]';\n\t    }\n\n\t    /**\n\t     * constructs a (m x n) array with all values 0\n\t     * @param  {number} m  the row\n\t     * @param  {number} n  the column\n\t     * @return {Array}\n\t     */\n\t    function zeros(m, n) {\n\t        var zeroArray = [];\n\t        for (var i = 0; i < m ; i++) {\n\t            zeroArray[i] = [];\n\t            for (var j = 0; j < n; j++) {\n\t                zeroArray[i][j] = 0;\n\t            }\n\t        }\n\t        return zeroArray;\n\t    }\n\n\t    /**\n\t     * Sums each element in the array.\n\t     * Internal use, for performance considerations, to avoid\n\t     * unnecessary judgments and calculations.\n\t     * @param  {Array} vector\n\t     * @return {number}\n\t     */\n\t    function sum(vector) {\n\t        var sum = 0;\n\t        for (var i = 0; i < vector.length; i++) {\n\t            sum += vector[i];\n\t        }\n\t        return sum;\n\t    }\n\n\t    /**\n\t     * Computes the sum of the specified column elements in a two-dimensional array\n\t     * @param  {Array.<Array>} dataList  two-dimensional array\n\t     * @param  {number} n  the specified column, zero-based\n\t     * @return {number}\n\t     */\n\t    function sumOfColumn(dataList, n) {\n\t        var sum = 0;\n\t        for (var i = 0; i < dataList.length; i++) {\n\t            sum += dataList[i][n];\n\t        }\n\t        return sum;\n\t    }\n\n\n\t    function ascending(a, b) {\n\n\t        return a > b ? 1 : a < b ? -1 : a === b ? 0 : NaN;\n\n\t    }\n\n\t    /**\n\t     * Binary search algorithm --- this bisector is specidfied to histogram, which every bin like that [a, b),\n\t     * so the return value use to add 1.\n\t     * @param  {Array.<number>} array\n\t     * @param  {number} value\n\t     * @param  {number} start\n\t     * @param  {number} end\n\t     * @return {number}\n\t     */\n\t    function bisect(array, value, start, end) { //移出去\n\n\t        if (start == null) {\n\t            start = 0;\n\t        }\n\t        if (end == null) {\n\t            end = array.length;\n\t        }\n\t        while (start < end) {\n\t            var mid = Math.floor((start + end) / 2);\n\t            var compare = ascending(array[mid], value);\n\t            if (compare > 0) {\n\t                end = mid;\n\t            }\n\t            else if (compare < 0) {\n\t                start = mid + 1;\n\t            }\n\t            else {\n\t                return mid + 1;\n\t            }\n\t        }\n\t        return start;\n\t    }\n\n\t    /**\n\t     * 数组映射\n\t     * @memberOf module:zrender/core/util\n\t     * @param {Array} obj\n\t     * @param {Function} cb\n\t     * @param {*} [context]\n\t     * @return {Array}\n\t     */\n\t    function map(obj, cb, context) {\n\t        if (!(obj && cb)) {\n\t            return;\n\t        }\n\t        if (obj.map && obj.map === nativeMap) {\n\t            return obj.map(cb, context);\n\t        }\n\t        else {\n\t            var result = [];\n\t            for (var i = 0, len = obj.length; i < len; i++) {\n\t                result.push(cb.call(context, obj[i], i, obj));\n\t            }\n\t            return result;\n\t        }\n\t    }\n\n\n\t    return {\n\t        size: size,\n\t        isArray: isArray,\n\t        zeros: zeros,\n\t        sum: sum,\n\t        sumOfColumn: sumOfColumn,\n\t        ascending: ascending,\n\t        bisect: bisect,\n\t        map: map\n\t    };\n\n\t}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n/***/ }),\n/* 4 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require) {\n\n\t    /**\n\t     * Test whether value is a number.\n\t     * @param  {*}  value\n\t     * @return {boolean}\n\t     */\n\t    function isNumber(value) {\n\n\t        value = value === null ? NaN : +value;\n\t        return typeof value === 'number' && !isNaN(value);\n\t    }\n\n\t    /**\n\t     * Test if a number is integer.\n\t     * @param  {number}  value\n\t     * @return {boolean}\n\t     */\n\t    function isInteger(value) {\n\t        return isFinite(value) && value === Math.round(value);\n\t    }\n\n\t    return {\n\t        isNumber: isNumber,\n\t        isInteger: isInteger\n\t    };\n\n\t}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n/***/ }),\n/* 5 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require) {\n\n\t    var dataProcess = __webpack_require__(2);\n\t    var dataPreprocess = dataProcess.dataPreprocess;\n\n\t    var regreMethods = {\n\n\t        /**\n\t         * Common linear regression algorithm\n\t         * @param  {Array.<Array.<number>>} data two-dimensional array\n\t         * @return {Object}\n\t         */\n\t        linear: function (data) {\n\n\t            var predata = dataPreprocess(data);\n\t            var sumX = 0;\n\t            var sumY = 0;\n\t            var sumXY = 0;\n\t            var sumXX = 0;\n\t            var len = predata.length;\n\n\t            for (var i = 0; i < len; i++) {\n\t                sumX += predata[i][0];\n\t                sumY += predata[i][1];\n\t                sumXY += predata[i][0] * predata[i][1];\n\t                sumXX += predata[i][0] * predata[i][0];\n\t            }\n\n\t            var gradient = ((len * sumXY) - (sumX * sumY)) / ((len * sumXX) - (sumX * sumX));\n\t            var intercept = (sumY / len) - ((gradient * sumX) / len);\n\n\t            var result = [];\n\t            for (var j = 0; j < predata.length; j++) {\n\t                var coordinate = [predata[j][0], gradient * predata[j][0] + intercept];\n\t                result.push(coordinate);\n\t            }\n\n\t            var string = 'y = ' + Math.round(gradient * 100) / 100 + 'x + ' + Math.round(intercept * 100) / 100;\n\n\t            return {\n\t                points: result,\n\t                parameter: {\n\t                    gradient: gradient,\n\t                    intercept: intercept\n\t                },\n\t                expression: string\n\t            };\n\t        },\n\n\t        /**\n\t         * If the raw data include [0,0] point, we should choose linearThroughOrigin\n\t         *   instead of linear.\n\t         * @param  {Array.<Array>} data  two-dimensional number array\n\t         * @return {Object}\n\t         */\n\t        linearThroughOrigin: function (data) {\n\n\t            var predata = dataPreprocess(data);\n\t            var sumXX = 0;\n\t            var sumXY = 0;\n\n\t            for (var i = 0; i < predata.length; i++) {\n\t                sumXX += predata[i][0] * predata[i][0];\n\t                sumXY += predata[i][0] * predata[i][1];\n\t            }\n\n\t            var gradient = sumXY / sumXX;\n\t            var result = [];\n\n\t            for (var j = 0; j < predata.length; j++) {\n\t                var coordinate = [predata[j][0], predata[j][0] * gradient];\n\t                result.push(coordinate);\n\t            }\n\n\t            var string = 'y = ' + Math.round(gradient * 100) / 100 + 'x';\n\n\t            return {\n\t                points: result,\n\t                parameter: {\n\t                    gradient: gradient\n\t                },\n\t                expression: string\n\t            };\n\t        },\n\n\t        /**\n\t         * Exponential regression\n\t         * @param  {Array.<Array.<number>>} data  two-dimensional number array\n\t         * @return {Object}\n\t         */\n\t        exponential: function (data) {\n\n\t            var predata = dataPreprocess(data);\n\t            var sumX = 0;\n\t            var sumY = 0;\n\t            var sumXXY = 0;\n\t            var sumYlny = 0;\n\t            var sumXYlny = 0;\n\t            var sumXY = 0;\n\n\t            for (var i = 0; i < predata.length; i++) {\n\t                sumX += predata[i][0];\n\t                sumY += predata[i][1];\n\t                sumXY += predata[i][0] * predata[i][1];\n\t                sumXXY += predata[i][0] * predata[i][0] * predata[i][1];\n\t                sumYlny += predata[i][1] * Math.log(predata[i][1]);\n\t                sumXYlny += predata[i][0] * predata[i][1] * Math.log(predata[i][1]);\n\t            }\n\n\t            var denominator = (sumY * sumXXY) - (sumXY * sumXY);\n\t            var coefficient = Math.pow(Math.E, (sumXXY * sumYlny - sumXY * sumXYlny) / denominator);\n\t            var index = (sumY * sumXYlny - sumXY * sumYlny) / denominator;\n\t            var result = [];\n\n\t            for (var j = 0; j < predata.length; j++) {\n\t                var coordinate = [predata[j][0], coefficient * Math.pow(Math.E, index * predata[j][0])];\n\t                result.push(coordinate);\n\t            }\n\n\t            var string = 'y = ' + Math.round(coefficient * 100) / 100 + 'e^(' + Math.round(index * 100) / 100 + 'x)';\n\n\t            return {\n\t                points: result,\n\t                parameter: {\n\t                    coefficient: coefficient,\n\t                    index: index\n\t                },\n\t                expression: string\n\t            };\n\n\t        },\n\n\t        /**\n\t         * Logarithmic regression\n\t         * @param  {Array.<Array.<number>>} data  two-dimensional number array\n\t         * @return {Object}\n\t         */\n\t        logarithmic: function (data) {\n\n\t            var predata = dataPreprocess(data);\n\t            var sumlnx = 0;\n\t            var sumYlnx = 0;\n\t            var sumY = 0;\n\t            var sumlnxlnx = 0;\n\n\t            for (var i = 0; i < predata.length; i++) {\n\t                sumlnx += Math.log(predata[i][0]);\n\t                sumYlnx += predata[i][1] * Math.log(predata[i][0]);\n\t                sumY += predata[i][1];\n\t                sumlnxlnx += Math.pow(Math.log(predata[i][0]), 2);\n\t            }\n\n\t            var gradient = (i * sumYlnx - sumY * sumlnx) / (i * sumlnxlnx - sumlnx * sumlnx);\n\t            var intercept = (sumY - gradient * sumlnx) / i;\n\t            var result = [];\n\n\t            for (var j = 0; j < predata.length; j++) {\n\t                var coordinate = [predata[j][0], gradient * Math.log(predata[j][0]) + intercept];\n\t                result.push(coordinate);\n\t            }\n\n\t            var string =\n\t                'y = '\n\t                + Math.round(intercept * 100) / 100\n\t                + ' + '\n\t                + Math.round(gradient * 100) / 100 + 'ln(x)';\n\n\t            return {\n\t                points: result,\n\t                parameter: {\n\t                    gradient: gradient,\n\t                    intercept: intercept\n\t                },\n\t                expression: string\n\t            };\n\n\t        },\n\n\t        /**\n\t         * Polynomial regression\n\t         * @param  {Array.<Array.<number>>} data  two-dimensional number array\n\t         * @param  {number} order  order of polynomials\n\t         * @return {Object}\n\t         */\n\t        polynomial: function (data, order) {\n\n\t            var predata = dataPreprocess(data);\n\t            if (typeof order === 'undefined') {\n\t                order = 2;\n\t            }\n\t            //coefficient matrix\n\t            var coeMatrix = [];\n\t            var lhs = [];\n\t            var k = order + 1;\n\n\t            for (var i = 0; i < k; i++) {\n\t                var sumA = 0;\n\t                for (var n = 0; n < predata.length; n++) {\n\t                    sumA += predata[n][1] * Math.pow(predata[n][0], i);\n\t                }\n\t                lhs.push(sumA);\n\n\t                var temp = [];\n\t                for (var j = 0; j < k; j++) {\n\t                    var sumB = 0;\n\t                    for (var m = 0; m < predata.length; m++) {\n\t                        sumB += Math.pow(predata[m][0], i + j);\n\t                    }\n\t                    temp.push(sumB);\n\t                }\n\t                coeMatrix.push(temp);\n\t            }\n\t            coeMatrix.push(lhs);\n\n\t            var coeArray = gaussianElimination(coeMatrix, k);\n\n\t            var result = [];\n\n\t            for (var i = 0; i < predata.length; i++) {\n\t                var value = 0;\n\t                for (var n = 0; n < coeArray.length; n++) {\n\t                    value += coeArray[n] * Math.pow(predata[i][0], n);\n\t                }\n\t                result.push([predata[i][0], value]);\n\t            }\n\n\t            var string = 'y = ';\n\t            for (var i = coeArray.length - 1; i >= 0; i--) {\n\t                if (i > 1) {\n\t                    string += Math.round(coeArray[i] * Math.pow(10, i + 1)) / Math.pow(10, i + 1) + 'x^' + i + ' + ';\n\t                }\n\t                else if (i === 1) {\n\t                    string += Math.round(coeArray[i] * 100) / 100 + 'x' + ' + ';\n\t                }\n\t                else {\n\t                    string += Math.round(coeArray[i] * 100) / 100;\n\t                }\n\t            }\n\n\t            return {\n\t                points: result,\n\t                parameter: coeArray,\n\t                expression: string\n\t            };\n\n\t        }\n\n\t    };\n\n\t    /**\n\t     * Gaussian elimination\n\t     * @param  {Array.<Array.<number>>} matrix   two-dimensional number array\n\t     * @param  {number} number\n\t     * @return {Array}\n\t     */\n\t    function gaussianElimination(matrix, number) {\n\n\t        for (var i = 0; i < matrix.length - 1; i++) {\n\t            var maxColumn = i;\n\t            for (var j = i + 1; j < matrix.length - 1; j++) {\n\t                if (Math.abs(matrix[i][j]) > Math.abs(matrix[i][maxColumn])) {\n\t                    maxColumn = j;\n\t                }\n\t            }\n\t            // the matrix here is the transpose of the common Augmented matrix.\n\t            //  so the can perform the primary column transform, in fact, equivalent\n\t            //  to the primary line changes\n\t            for (var k = i; k < matrix.length; k++) {\n\t                var temp = matrix[k][i];\n\t                matrix[k][i] = matrix[k][maxColumn];\n\t                matrix[k][maxColumn] = temp;\n\t            }\n\t            for (var n = i + 1; n < matrix.length - 1; n++) {\n\t                for (var m = matrix.length - 1; m >= i; m--) {\n\t                    matrix[m][n] -= matrix[m][i] / matrix[i][i] * matrix[i][n];\n\t                }\n\t            }\n\t        }\n\n\t        var data = new Array(number);\n\t        var len = matrix.length - 1;\n\t        for (var j = matrix.length - 2; j >= 0; j--) {\n\t            var temp = 0;\n\t            for (var i = j + 1; i < matrix.length - 1; i++) {\n\t                temp += matrix[i][j] * data[i];\n\t            }\n\t            data[j] = (matrix[len][j] - temp) / matrix[j][j];\n\n\t        }\n\n\t        return data;\n\t    }\n\n\t    var regression = function (regreMethod, data, order) {\n\n\t        return regreMethods[regreMethod](data, order);\n\n\t    };\n\n\t    return regression;\n\n\t}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n/***/ }),\n/* 6 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require) {\n\n\t    var statistics = {};\n\n\t    statistics.max = __webpack_require__(7);\n\t    statistics.deviation = __webpack_require__(8);\n\t    statistics.mean = __webpack_require__(10);\n\t    statistics.median = __webpack_require__(12);\n\t    statistics.min = __webpack_require__(14);\n\t    statistics.quantile = __webpack_require__(13);\n\t    statistics.sampleVariance = __webpack_require__(9);\n\t    statistics.sum = __webpack_require__(11);\n\n\t    return statistics;\n\n\t}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n/***/ }),\n/* 7 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require) {\n\n\t    var number = __webpack_require__(4);\n\t    var isNumber = number.isNumber;\n\n\t    /**\n\t     * Is a method for computing the max value of a list of numbers,\n\t     * which will filter other data types.\n\t     * @param  {Array.<number>} data\n\t     * @return {number}\n\t     */\n\t    function max(data) {\n\n\t        var maxData = -Infinity;\n\t        for (var i = 0; i < data.length; i++) {\n\t            if (isNumber(data[i]) && data[i] > maxData) {\n\t                maxData = data[i];\n\t            }\n\t        }\n\t        return maxData;\n\t    }\n\n\t    return max;\n\n\t}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n/***/ }),\n/* 8 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require) {\n\n\t    var variance = __webpack_require__(9);\n\n\t    /**\n\t     * Computing the deviation\n\t     * @param  {Array.<number>} data\n\t     * @return {number}\n\t     */\n\t    return function (data) {\n\n\t        var squaredDeviation = variance(data);\n\n\t        return squaredDeviation ? Math.sqrt(squaredDeviation) : squaredDeviation;\n\t    };\n\t}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n/***/ }),\n/* 9 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require) {\n\n\t    var number = __webpack_require__(4);\n\t    var isNumber = number.isNumber;\n\t    var mean = __webpack_require__(10);\n\n\t    /**\n\t     * Computing the variance of list of sample\n\t     * @param  {Array.<number>} data\n\t     * @return {number}\n\t     */\n\t    function sampleVariance(data) {\n\n\t        var len = data.length;\n\t        if (!len || len < 2) {\n\t            return 0;\n\t        }\n\t        if (data.length >= 2) {\n\n\t            var meanValue = mean(data);\n\t            var sum = 0;\n\t            var temple;\n\n\t            for (var i = 0; i < data.length; i++) {\n\t                if (isNumber(data[i])) {\n\t                    temple = data[i] - meanValue;\n\t                    sum += temple * temple;\n\t                }\n\t            }\n\t            return sum / (data.length - 1);\n\t        }\n\t    }\n\n\t    return sampleVariance;\n\n\t}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n/***/ }),\n/* 10 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require) {\n\n\t    var sum = __webpack_require__(11);\n\n\t    /**\n\t     * Is a method for computing the mean value of a list of numbers,\n\t     * which will filter other data types.\n\t     * @param  {Array.<number>} data\n\t     * @return {number}\n\t     */\n\t    function mean(data) {\n\n\t        var len = data.length;\n\n\t        if (!len) {\n\t            return 0;\n\t        }\n\n\t        return sum(data) / data.length;\n\n\t    }\n\n\t    return mean;\n\n\n\t}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n/***/ }),\n/* 11 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require) {\n\n\t    var number = __webpack_require__(4);\n\t    var isNumber = number.isNumber;\n\n\t    /**\n\t     * Is a method for computing the sum of a list of numbers,\n\t     * which will filter other data types.\n\t     * @param  {Array.<number>} data\n\t     * @return {number}\n\t     */\n\t    function sum(data) {\n\n\t        var len = data.length;\n\n\t        if (!len) {\n\t            return 0;\n\t        }\n\t        var sumData = 0;\n\t        for (var i = 0; i < len; i++) {\n\t            if (isNumber(data[i])) {\n\t                sumData += data[i];\n\t            }\n\t        }\n\t        return sumData;\n\t    }\n\n\t    return sum;\n\n\t}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n/***/ }),\n/* 12 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require) {\n\n\t    var quantile = __webpack_require__(13);\n\n\t    /**\n\t     * Is a method for computing the median value of a sorted array of numbers\n\t     * @param  {Array.<number>} data\n\t     * @return {number}\n\t     */\n\t    function median(data) {\n\n\t        return quantile(data, 0.5);\n\t    }\n\n\t    return median;\n\n\t}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n/***/ }),\n/* 13 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require) {\n\n\t    /**\n\t     * Estimating quantiles from a sorted sample of numbers\n\t     * @see https://en.wikipedia.org/wiki/Quantile#Estimating_quantiles_from_a_sample\n\t     * R-7 method\n\t     * @param  {Array.<number>} data  sorted array\n\t     * @param  {number} p\n\t     */\n\t    return function (data, p) {\n\n\t        var len = data.length;\n\n\t        if (!len) {\n\t            return 0;\n\t        }\n\t        if (p <= 0 || len < 2) {\n\t            return data[0];\n\t        }\n\t        if (p >= 1) {\n\t            return data[len -1];\n\t        }\n\t        // in the wikipedia's R-7 method h = (N - 1)p + 1, but here array index start from 0\n\t        var h = (len - 1) * p;\n\t        var i = Math.floor(h);\n\t        var a = data[i];\n\t        var b = data[i + 1];\n\t        return a + (b - a) * (h - i);\n\t    };\n\n\t}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n/***/ }),\n/* 14 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require) {\n\n\t    var number = __webpack_require__(4);\n\t    var isNumber = number.isNumber;\n\n\t    /**\n\t     * Is a method for computing the min value of a list of numbers,\n\t     * which will filter other data types.\n\t     * @param  {Array.<number>} data\n\t     * @return {number}\n\t     */\n\t    function min(data) {\n\n\t        var minData = Infinity;\n\t        for (var i = 0; i < data.length; i++) {\n\t            if (isNumber(data[i]) && data[i] < minData) {\n\t                minData = data[i];\n\t            }\n\t        }\n\t        return minData;\n\t    }\n\n\t    return min;\n\n\t}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n/***/ }),\n/* 15 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require) {\n\n\t    var max = __webpack_require__(7);\n\t    var min = __webpack_require__(14);\n\t    var quantile = __webpack_require__(13);\n\t    var deviation = __webpack_require__(8);\n\t    var dataProcess = __webpack_require__(2);\n\t    var dataPreprocess = dataProcess.dataPreprocess;\n\t    var getPrecision = dataProcess.getPrecision;\n\t    var array = __webpack_require__(3);\n\t    var ascending = array.ascending;\n\t    var map = array.map;\n\t    var range = __webpack_require__(16);\n\t    var bisect = array.bisect;\n\t    var tickStep = __webpack_require__(17);\n\n\t    /**\n\t     * Compute bins for histogram\n\t     * @param  {Array.<number>} data\n\t     * @param  {string} threshold\n\t     * @return {Object}\n\t     */\n\t    function computeBins(data, threshold) {\n\n\t        if (threshold == null) {\n\t            threshold = thresholdMethod.squareRoot;\n\t        }\n\t        else {\n\t            threshold = thresholdMethod[threshold];\n\t        }\n\t        var values = dataPreprocess(data);\n\t        var maxValue = max(values);\n\t        var minValue = min(values);\n\t        var binsNumber = threshold(values, minValue, maxValue);\n\t        var step = tickStep(minValue, maxValue, binsNumber);\n\t        var precision = -Math.floor(Math.log(Math.abs(maxValue - minValue) / binsNumber) / Math.LN10);\n\t        \n\t        // return the xAxis coordinate for each bins, except the end point of the value\n\t        var rangeArray = range(\n\t                // use function toFixed() to avoid data like '0.700000001'\n\t                +((Math.ceil(minValue / step) * step).toFixed(precision)),\n\t                +((Math.floor(maxValue / step) * step).toFixed(precision)),\n\t                step,\n\t                precision\n\t            );\n\n\t        var len = rangeArray.length;\n\n\t        var bins = new Array(len + 1);\n\n\t        for (var i = 0; i <= len; i++) {\n\t            bins[i] = {};\n\t            bins[i].sample = [];\n\t            bins[i].x0 = i > 0 \n\t                ? rangeArray[i - 1]\n\t                : (rangeArray[i] - minValue) === step\n\t                ? minValue\n\t                : (rangeArray[i] - step);\n\t            bins[i].x1 = i < len\n\t                ? rangeArray[i]\n\t                : (maxValue - rangeArray[i-1]) === step\n\t                ? maxValue\n\t                : rangeArray[i - 1] + step;\n\t        }\n\n\t        for (var i = 0; i < values.length; i++) {\n\t            if (minValue <= values[i] && values[i] <= maxValue) {\n\t                bins[bisect(rangeArray, values[i], 0, len)].sample.push(values[i]);\n\t            }\n\t        }\n\n\t        var data = map(bins, function (bin) {\n\t            // use function toFixed() to avoid data like '6.5666638489'\n\t            return [+((bin.x0 + bin.x1) / 2).toFixed(precision), bin.sample.length];\n\t        });\n\n\t        var customData = map(bins, function (bin) {\n\t            return [bin.x0, bin.x1, bin.sample.length];\n\t        });\n\n\t        return {\n\t            bins: bins,\n\t            data: data,\n\t            customData: customData\n\t        };\n\t    }\n\n\t    /**\n\t     * Four kinds of threshold methods used to\n\t     * compute how much bins the histogram should be divided\n\t     * @see  https://en.wikipedia.org/wiki/Histogram\n\t     * @type {Object}\n\t     */\n\t    var thresholdMethod = {\n\n\t        squareRoot: function (data) {\n\n\t            var bins = Math.ceil(Math.sqrt(data.length));\n\n\t            return bins > 50 ? 50 : bins;\n\t        },\n\n\t        scott: function (data, min, max) {\n\n\t            return Math.ceil((max - min) / (3.5 * deviation(data) * Math.pow(data.length, -1 / 3)));\n\t        },\n\n\t        freedmanDiaconis: function (data, min, max) {\n\n\t            data.sort(ascending);\n\n\t            return Math.ceil(\n\t                (max - min) / (2 * (quantile(data, 0.75) - quantile(data, 0.25)) * Math.pow(data.length, -1 / 3))\n\t            );\n\t        },\n\n\t        sturges: function (data) {\n\n\t            return Math.ceil(Math.log(data.length) / Math.LN2) + 1;\n\n\t        }\n\t    };\n\n\t    return computeBins;\n\n\t}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n/***/ }),\n/* 16 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require) {\n\n\t    var dataProcess = __webpack_require__(2);\n\t    var getPrecision = dataProcess.getPrecision;\n\n\t    /**\n\t     * Computing range array.\n\t     * Adding param precision to fix range value, avoiding range[i] = 0.7000000001.\n\t     * @param  {number} start\n\t     * @param  {number} end\n\t     * @param  {number} step\n\t     * @param  {number} precision\n\t     * @return {Array.<number>}\n\t     */\n\t    return function (start, end, step, precision) {\n\n\t        var len = arguments.length;\n\n\t        if (len < 2) {\n\t            end = start;\n\t            start = 0;\n\t            step = 1;\n\t        }\n\t        else if (len < 3) {\n\t            step = 1;\n\t        }\n\t        else if (len < 4) {\n\t            step = +step;\n\t            precision = getPrecision(step);\n\t        }\n\t        else {\n\t            precision = +precision;\n\t        }\n\n\t        var n = Math.ceil(((end - start) / step).toFixed(precision));\n\t        var range = new Array(n + 1);\n\t        for (var i = 0; i < n + 1; i++) {\n\t            range[i] = +(start + i * step).toFixed(precision);\n\t        }\n\t        return range;\n\t    };\n\n\t}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n/***/ }),\n/* 17 */\n/***/ (function(module, exports, __webpack_require__) {\n\n\tvar __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require) {\n\n\t    /**\n\t     * Computing the length of step\n\t     * @see  https://github.com/d3/d3-array/blob/master/src/ticks.js\n\t     * @param {number} start\n\t     * @param {number} stop\n\t     * @param {number} count\n\t     */\n\t    return function (start, stop, count) {\n\n\t        var step0 = Math.abs(stop - start) / count;\n\t        var precision = Math.floor(Math.log(step0) / Math.LN10);\n\t        var step1 = Math.pow(10, precision);\n\t        var error = step0 / step1;\n\n\t        if (error >= Math.sqrt(50)) {\n\t            step1 *= 10;\n\t        }\n\t        else if (error >= Math.sqrt(10)) {\n\t            step1 *= 5;\n\t        }\n\t        else if(error >= Math.sqrt(2)) {\n\t            step1 *= 2;\n\t        }\n\t        return +((stop >= start ? step1 : -step1).toFixed(-precision));\n\n\t    };\n\n\t}.call(exports, __webpack_require__, exports, module), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n/***/ })\n/******/ ])\n});\n;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/echarts-stat/dist/ecStat.js\n// module id = GY9q\n// module chunks = 0","var $parseInt = require('./_global').parseInt;\nvar $trim = require('./_string-trim').trim;\nvar ws = require('./_string-ws');\nvar hex = /^[-+]?0[xX]/;\n\nmodule.exports = $parseInt(ws + '08') !== 8 || $parseInt(ws + '0x16') !== 22 ? function parseInt(str, radix) {\n  var string = $trim(String(str), 3);\n  return $parseInt(string, (radix >>> 0) || (hex.test(string) ? 16 : 10));\n} : $parseInt;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/core-js/library/modules/_parse-int.js\n// module id = KpO7\n// module chunks = 0","<template>\r\n    <div name=\"Chart2\" class=\"chart2\">\r\n        <div class=\"data-area\">\r\n            <div class=\"clearfix\">\r\n                <div class=\"form-group col-xs-3 col-md-3\" v-for=\"(item,index) in trueLength\" :key=\"index\">\r\n                    <input class=\"form-control\" type=\"number\" v-model=\"data[index][0]\" @keyup.enter=\"indexChange(data[index][0],index)\"><input class=\"form-control\" type=\"number\" v-model=\"data[index][1]\">\r\n                </div>\r\n            </div>\r\n            <div class=\"clearfix\">\r\n                <div class=\"form-group col-xs-12 col-md-12\">\r\n                    <label>Length</label>\r\n                    <input type=\"text\" maxlength=\"2\" v-model=\"length\" @keyup.enter=\"reset\">\r\n                    <button class=\"btn btn-sm btn-info\" v-on:click='reset'>Reset</button>\r\n                    <button class=\"btn btn-sm btn-success\" v-on:click='initCharts'>Paint</button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n        <div class=\"chart-ctn\" id=\"chartsCtn\"></div>\r\n    </div>\r\n</template>\r\n<script>\r\nimport eCharts from 'echarts';\r\nimport ecStat from 'echarts-stat';\r\nvar initData = function(length) {\r\n  let array = [];\r\n  for (let i = 0; i < length; i++) {\r\n    array.push([i, '']);\r\n  }\r\n  return array;\r\n};\r\nvar fetchData = function(data) {\r\n  let array = [];\r\n  for (let i = 0, l = data.length; i < l; i++) {\r\n    if (data[i][1]) {\r\n      array.push(data[i]);\r\n    } else {\r\n      break;\r\n    }\r\n  }\r\n  return array;\r\n};\r\nexport default {\r\n  name: 'chart2',\r\n  data() {\r\n    return {\r\n      data: [],\r\n      length: 12,\r\n      trueLength: 12\r\n    };\r\n  },\r\n  methods: {\r\n    reset: function() {\r\n      console.log(this.length);\r\n      this.trueLength = Number.parseInt(this.length);\r\n      this.data = initData(this.trueLength);\r\n    },\r\n    indexChange: function(number, index) {\r\n      number = Number.parseInt(number);\r\n      this.data = this.data.map((item, i) => {\r\n        if (i > index) {\r\n          item[0] = number + i - index;\r\n          return item;\r\n        } else {\r\n          return item;\r\n        }\r\n      });\r\n    },\r\n    initCharts: function() {\r\n      let target = fetchData(this.data);\r\n      var myRegression = ecStat.regression('polynomial', target, 3);\r\n      myRegression.points.sort(function(a, b) {\r\n        return a[0] - b[0];\r\n      });\r\n      // 图表渲染\r\n      var myCharts = eCharts.init(document.getElementById('chartsCtn'));\r\n      myCharts.setOption({\r\n        toolbox: {\r\n          feature: {\r\n            saveAsImage: {}\r\n          }\r\n        },\r\n        xAxis: {\r\n          type: 'value',\r\n          splitLine: {\r\n            lineStyle: {\r\n              type: 'dashed'\r\n            }\r\n          },\r\n          max: 'dataMax',\r\n          min: 'dataMin'\r\n        },\r\n        yAxis: {\r\n          type: 'value',\r\n          splitLine: {\r\n            lineStyle: {\r\n              type: 'dashed'\r\n            }\r\n          },\r\n          max: 'dataMax',\r\n          min: 'dataMin'\r\n        },\r\n        series: [\r\n          {\r\n            name: 'data',\r\n            type: 'line',\r\n            data: target\r\n          },\r\n          {\r\n            name: 'standard',\r\n            type: 'line',\r\n            data: myRegression.points,\r\n            markPoint: {\r\n              itemStyle: {\r\n                normal: {\r\n                  color: 'transparent'\r\n                }\r\n              },\r\n              label: {\r\n                normal: {\r\n                  show: true,\r\n                  position: 'left',\r\n                  formatter: myRegression.expression,\r\n                  textStyle: {\r\n                    color: '#333',\r\n                    fontSize: 14\r\n                  }\r\n                }\r\n              },\r\n              data: [\r\n                {\r\n                  coord: myRegression.points[myRegression.points.length - 1]\r\n                }\r\n              ]\r\n            }\r\n          }\r\n        ]\r\n      });\r\n    }\r\n  },\r\n  created: function() {\r\n    this.data = initData(this.length);\r\n  }\r\n};\r\n</script>\r\n<style lang=\"scss\" scoped>\r\n.chart2 {\r\n  display: flex;\r\n  flex-direction: column;\r\n  height: 100%;\r\n  input {\r\n    text-align: center !important;\r\n  }\r\n}\r\n.chart-ctn {\r\n  height: 480px;\r\n  width: 100%;\r\n}\r\n</style>\r\n\n\n\n// WEBPACK FOOTER //\n// Chart2.vue?2c1eece3","\n/* styles */\nrequire(\"!!../../node_modules/extract-text-webpack-plugin/loader.js?{\\\"omit\\\":1,\\\"remove\\\":true}!vue-style-loader!css-loader?sourceMap!../../node_modules/vue-loader/lib/style-rewriter?id=data-v-24fbfa86&scoped=true!sass-loader?sourceMap!../../node_modules/vue-loader/lib/selector?type=styles&index=0!./Chart2.vue\")\n\nvar Component = require(\"!../../node_modules/vue-loader/lib/component-normalizer\")(\n  /* script */\n  require(\"!!babel-loader!../../node_modules/vue-loader/lib/selector?type=script&index=0!./Chart2.vue\"),\n  /* template */\n  require(\"!!../../node_modules/vue-loader/lib/template-compiler?id=data-v-24fbfa86!../../node_modules/vue-loader/lib/selector?type=template&index=0!./Chart2.vue\"),\n  /* scopeId */\n  \"data-v-24fbfa86\",\n  /* cssModules */\n  null\n)\n\nmodule.exports = Component.exports\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/components/Chart2.vue\n// module id = YNOL\n// module chunks = 0","module.exports = { \"default\": require(\"core-js/library/fn/number/parse-int\"), __esModule: true };\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/babel-runtime/core-js/number/parse-int.js\n// module id = gBtx\n// module chunks = 0","module.exports = '\\x09\\x0A\\x0B\\x0C\\x0D\\x20\\xA0\\u1680\\u180E\\u2000\\u2001\\u2002\\u2003' +\n  '\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200A\\u202F\\u205F\\u3000\\u2028\\u2029\\uFEFF';\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/core-js/library/modules/_string-ws.js\n// module id = hyta\n// module chunks = 0","exports = module.exports = require(\"../../node_modules/css-loader/lib/css-base.js\")();\n// imports\n\n\n// module\nexports.push([module.id, \"\\n.chart2[data-v-24fbfa86] {\\n  display: -ms-flexbox;\\n  display: flex;\\n  -ms-flex-direction: column;\\n      flex-direction: column;\\n  height: 100%;\\n}\\n.chart2 input[data-v-24fbfa86] {\\n    text-align: center !important;\\n}\\n.chart-ctn[data-v-24fbfa86] {\\n  height: 480px;\\n  width: 100%;\\n}\\n\", \"\", {\"version\":3,\"sources\":[\"D:/Project/footballadvice/src/components/Chart2.vue\"],\"names\":[],\"mappings\":\";AACA;EACE,qBAAqB;EACrB,cAAc;EACd,2BAA2B;MACvB,uBAAuB;EAC3B,aAAa;CACd;AACD;IACI,8BAA8B;CACjC;AACD;EACE,cAAc;EACd,YAAY;CACb\",\"file\":\"Chart2.vue\",\"sourcesContent\":[\"\\n.chart2[data-v-24fbfa86] {\\n  display: -ms-flexbox;\\n  display: flex;\\n  -ms-flex-direction: column;\\n      flex-direction: column;\\n  height: 100%;\\n}\\n.chart2 input[data-v-24fbfa86] {\\n    text-align: center !important;\\n}\\n.chart-ctn[data-v-24fbfa86] {\\n  height: 480px;\\n  width: 100%;\\n}\\n\"],\"sourceRoot\":\"\"}]);\n\n// exports\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/css-loader?sourceMap!./~/vue-loader/lib/style-rewriter.js?id=data-v-24fbfa86&scoped=true!./~/sass-loader/lib/loader.js?sourceMap!./~/vue-loader/lib/selector.js?type=styles&index=0!./src/components/Chart2.vue\n// module id = iEFX\n// module chunks = 0","var $export = require('./_export');\nvar defined = require('./_defined');\nvar fails = require('./_fails');\nvar spaces = require('./_string-ws');\nvar space = '[' + spaces + ']';\nvar non = '\\u200b\\u0085';\nvar ltrim = RegExp('^' + space + space + '*');\nvar rtrim = RegExp(space + space + '*$');\n\nvar exporter = function (KEY, exec, ALIAS) {\n  var exp = {};\n  var FORCE = fails(function () {\n    return !!spaces[KEY]() || non[KEY]() != non;\n  });\n  var fn = exp[KEY] = FORCE ? exec(trim) : spaces[KEY];\n  if (ALIAS) exp[ALIAS] = fn;\n  $export($export.P + $export.F * FORCE, 'String', exp);\n};\n\n// 1 -> String#trimLeft\n// 2 -> String#trimRight\n// 3 -> String#trim\nvar trim = exporter.trim = function (string, TYPE) {\n  string = String(defined(string));\n  if (TYPE & 1) string = string.replace(ltrim, '');\n  if (TYPE & 2) string = string.replace(rtrim, '');\n  return string;\n};\n\nmodule.exports = exporter;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/core-js/library/modules/_string-trim.js\n// module id = mnVu\n// module chunks = 0","// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = require(\"!!../../node_modules/css-loader/index.js?sourceMap!../../node_modules/vue-loader/lib/style-rewriter.js?id=data-v-24fbfa86&scoped=true!../../node_modules/sass-loader/lib/loader.js?sourceMap!../../node_modules/vue-loader/lib/selector.js?type=styles&index=0!./Chart2.vue\");\nif(typeof content === 'string') content = [[module.id, content, '']];\nif(content.locals) module.exports = content.locals;\n// add the styles to the DOM\nvar update = require(\"!../../node_modules/vue-style-loader/lib/addStylesClient.js\")(\"1d670648\", content, true);\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/extract-text-webpack-plugin/loader.js?{\"omit\":1,\"remove\":true}!./~/vue-style-loader!./~/css-loader?sourceMap!./~/vue-loader/lib/style-rewriter.js?id=data-v-24fbfa86&scoped=true!./~/sass-loader/lib/loader.js?sourceMap!./~/vue-loader/lib/selector.js?type=styles&index=0!./src/components/Chart2.vue\n// module id = oB8E\n// module chunks = 0","require('../../modules/es6.number.parse-int');\nmodule.exports = require('../../modules/_core').Number.parseInt;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/core-js/library/fn/number/parse-int.js\n// module id = qrpI\n// module chunks = 0","module.exports = require('./dist/ecStat.js');\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/echarts-stat/index.js\n// module id = siuG\n// module chunks = 0","module.exports={render:function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _c('div', {\n    staticClass: \"chart2\",\n    attrs: {\n      \"name\": \"Chart2\"\n    }\n  }, [_c('div', {\n    staticClass: \"data-area\"\n  }, [_c('div', {\n    staticClass: \"clearfix\"\n  }, _vm._l((_vm.trueLength), function(item, index) {\n    return _c('div', {\n      key: index,\n      staticClass: \"form-group col-xs-3 col-md-3\"\n    }, [_c('input', {\n      directives: [{\n        name: \"model\",\n        rawName: \"v-model\",\n        value: (_vm.data[index][0]),\n        expression: \"data[index][0]\"\n      }],\n      staticClass: \"form-control\",\n      attrs: {\n        \"type\": \"number\"\n      },\n      domProps: {\n        \"value\": (_vm.data[index][0])\n      },\n      on: {\n        \"keyup\": function($event) {\n          if (!('button' in $event) && _vm._k($event.keyCode, \"enter\", 13, $event.key, \"Enter\")) { return null; }\n          _vm.indexChange(_vm.data[index][0], index)\n        },\n        \"input\": function($event) {\n          if ($event.target.composing) { return; }\n          _vm.$set(_vm.data[index], 0, $event.target.value)\n        }\n      }\n    }), _c('input', {\n      directives: [{\n        name: \"model\",\n        rawName: \"v-model\",\n        value: (_vm.data[index][1]),\n        expression: \"data[index][1]\"\n      }],\n      staticClass: \"form-control\",\n      attrs: {\n        \"type\": \"number\"\n      },\n      domProps: {\n        \"value\": (_vm.data[index][1])\n      },\n      on: {\n        \"input\": function($event) {\n          if ($event.target.composing) { return; }\n          _vm.$set(_vm.data[index], 1, $event.target.value)\n        }\n      }\n    })])\n  })), _vm._v(\" \"), _c('div', {\n    staticClass: \"clearfix\"\n  }, [_c('div', {\n    staticClass: \"form-group col-xs-12 col-md-12\"\n  }, [_c('label', [_vm._v(\"Length\")]), _vm._v(\" \"), _c('input', {\n    directives: [{\n      name: \"model\",\n      rawName: \"v-model\",\n      value: (_vm.length),\n      expression: \"length\"\n    }],\n    attrs: {\n      \"type\": \"text\",\n      \"maxlength\": \"2\"\n    },\n    domProps: {\n      \"value\": (_vm.length)\n    },\n    on: {\n      \"keyup\": function($event) {\n        if (!('button' in $event) && _vm._k($event.keyCode, \"enter\", 13, $event.key, \"Enter\")) { return null; }\n        return _vm.reset($event)\n      },\n      \"input\": function($event) {\n        if ($event.target.composing) { return; }\n        _vm.length = $event.target.value\n      }\n    }\n  }), _vm._v(\" \"), _c('button', {\n    staticClass: \"btn btn-sm btn-info\",\n    on: {\n      \"click\": _vm.reset\n    }\n  }, [_vm._v(\"Reset\")]), _vm._v(\" \"), _c('button', {\n    staticClass: \"btn btn-sm btn-success\",\n    on: {\n      \"click\": _vm.initCharts\n    }\n  }, [_vm._v(\"Paint\")])])])]), _vm._v(\" \"), _c('div', {\n    staticClass: \"chart-ctn\",\n    attrs: {\n      \"id\": \"chartsCtn\"\n    }\n  })])\n},staticRenderFns: []}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/vue-loader/lib/template-compiler.js?id=data-v-24fbfa86!./~/vue-loader/lib/selector.js?type=template&index=0!./src/components/Chart2.vue\n// module id = zXSq\n// module chunks = 0"],"sourceRoot":""}