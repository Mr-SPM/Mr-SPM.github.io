{"version":3,"sources":["webpack:///static/js/0.d1f5d2361be639ed6955.js","webpack:///./~/echarts-stat/src/statistics/sum.js","webpack:///./~/echarts-stat/src/ecStat.js","webpack:///./~/echarts-stat/src/statistics/median.js","webpack:///./~/echarts-stat/src/util/dataPreprocess.js","webpack:///./~/core-js/library/modules/es6.number.parse-int.js","webpack:///./~/echarts-stat/src/statistics/mean.js","webpack:///./~/echarts-stat/src/statistics.js","webpack:///./~/echarts-stat/src/util/range.js","webpack:///./~/echarts-stat/src/util/number.js","webpack:///./~/echarts-stat/src/statistics/quantile.js","webpack:///./~/echarts-stat/src/regression.js","webpack:///./~/core-js/library/modules/_parse-int.js","webpack:///./src/components/Chart2.vue?e5d6","webpack:///./~/echarts-stat/src/statistics/min.js","webpack:///Chart2.vue","webpack:///./~/echarts-stat/src/util/array.js","webpack:///./~/echarts-stat/src/util/tickStep.js","webpack:///./src/components/Chart2.vue","webpack:///./~/echarts-stat/src/statistics/deviation.js","webpack:///./~/babel-runtime/core-js/number/parse-int.js","webpack:///./~/echarts-stat/src/statistics/max.js","webpack:///./~/core-js/library/modules/_string-ws.js","webpack:///./~/echarts-stat/src/clustering.js","webpack:///./~/echarts-stat/src/statistics/sampleVariance.js","webpack:///./src/components/Chart2.vue?c3b2","webpack:///./~/core-js/library/modules/_string-trim.js","webpack:///./src/components/Chart2.vue?501f","webpack:///./~/echarts-stat/src/histogram.js","webpack:///./~/core-js/library/fn/number/parse-int.js","webpack:///./~/echarts-stat/index.js"],"names":["webpackJsonp","/qwy","module","exports","__webpack_require__","__WEBPACK_AMD_DEFINE_RESULT__","undefined","require","sum","data","len","length","sumData","i","isNumber","number","call","3swe","clustering","regression","statistics","histogram","6VY8","median","quantile","8OXD","dataPreprocess","isArray","Error","predata","arraySize","size","push","isCorrect","j","array","8sHD","$export","$parseInt","S","F","Number","parseInt","AdH9","mean","CcTk","max","deviation","min","EEvw","start","stop","step","arguments","n","Math","ceil","range","Array","FD0L","value","NaN","isNaN","isInteger","isFinite","round","GE/a","p","h","floor","a","KPhj","gaussianElimination","matrix","maxColumn","abs","k","temp","m","regreMethods","linear","sumX","sumY","sumXY","sumXX","gradient","intercept","result","coordinate","points","parameter","expression","linearThroughOrigin","exponential","sumXXY","sumYlny","sumXYlny","log","denominator","coefficient","pow","E","index","logarithmic","sumlnx","sumYlnx","sumlnxlnx","polynomial","order","coeMatrix","lhs","sumA","sumB","coeArray","string","regreMethod","KpO7","$trim","trim","ws","hex","str","radix","String","test","Laaf","render","_vm","this","_h","$createElement","_c","_self","staticClass","attrs","name","_l","item","key","directives","rawName","type","domProps","on","keyup","$event","_k","keyCode","indexChange","input","target","composing","$$exp","splice","blur","$forceUpdate","_v","maxlength","reset","click","initCharts","id","staticRenderFns","Qn3C","minData","Infinity","QxJS","__webpack_exports__","Object","defineProperty","__WEBPACK_IMPORTED_MODULE_0_babel_runtime_core_js_number_parse_int__","__WEBPACK_IMPORTED_MODULE_0_babel_runtime_core_js_number_parse_int___default","__WEBPACK_IMPORTED_MODULE_1_echarts__","__WEBPACK_IMPORTED_MODULE_1_echarts___default","__WEBPACK_IMPORTED_MODULE_2_echarts_stat__","__WEBPACK_IMPORTED_MODULE_2_echarts_stat___default","initData","fetchData","l","trueLength","methods","console","map","myRegression","sort","b","init","document","getElementById","setOption","toolbox","feature","saveAsImage","xAxis","splitLine","lineStyle","yAxis","series","markPoint","itemStyle","normal","color","label","show","position","formatter","textStyle","fontSize","coord","created","TDOf","s","objToString","zeros","zeroArray","vector","sumOfColumn","dataList","ascending","bisect","end","mid","compare","obj","cb","context","nativeMap","prototype","toString","arrayProto","VofG","count","step0","step1","LN10","error","sqrt","YNOL","Component","aFh2","variance","squaredDeviation","gBtx","default","__esModule","gSCM","maxData","hyta","iU7c","kMeans","minDist","minIndex","distIJ","ptsInClust","clusterAssigned","centroids","createRandCent","clusterChanged","distEuclid","mathPow","meanInColumns","meanArray","hierarchicalKMeans","stepByStep","oneStep","lowestSSE","centSplit","newCentroid","newClusterAss","centList","ptsNotClust","clusterAssment","dataSet","clusterInfo","sseSplit","sseNotSplit","arraySum","pointInClust","pointsInCluster","isEnd","squareError","centroid0","next","minJ","maxJ","rangeJ","random","vec1","vec2","mathSqrt","powerSum","jhyr","sampleVariance","temple","meanValue","kXkD","content","locals","mnVu","defined","fails","spaces","space","non","ltrim","RegExp","rtrim","exporter","KEY","exec","ALIAS","exp","FORCE","fn","P","TYPE","replace","nF0Y","version","sources","names","mappings","file","sourcesContent","sourceRoot","oooa","computeBins","threshold","thresholdMethod","squareRoot","values","maxValue","minValue","binsNumber","tickStep","rangeArray","bins","sample","x0","x1","bin","scott","freedmanDiaconis","sturges","LN2","qrpI","siuG"],"mappings":"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","file":"static/js/0.d1f5d2361be639ed6955.js","sourcesContent":["webpackJsonp([0],{\n\n/***/ \"/qwy\":\n/***/ (function(module, exports, __webpack_require__) {\n\nvar __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require) {\n\n    var number = __webpack_require__(\"FD0L\");\n    var isNumber = number.isNumber;\n\n    /**\n     * Is a method for computing the sum of a list of numbers,\n     * which will filter other data types.\n     * @param  {Array.<number>} data\n     * @return {number}\n     */\n    function sum(data) {\n\n        var len = data.length;\n\n        if (!len) {\n            return 0;\n        }\n        var sumData = 0;\n        for (var i = 0; i < len; i++) {\n            if (isNumber(data[i])) {\n                sumData += data[i];\n            }\n        }\n        return sumData;\n    }\n\n    return sum;\n\n}.call(exports, __webpack_require__, exports, module),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n/***/ }),\n\n/***/ \"3swe\":\n/***/ (function(module, exports, __webpack_require__) {\n\nvar __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require) {\n\n    return {\n\n        clustering: __webpack_require__(\"iU7c\"),\n        regression: __webpack_require__(\"KPhj\"),\n        statistics: __webpack_require__(\"CcTk\"),\n        histogram: __webpack_require__(\"oooa\")\n\n    };\n\n}.call(exports, __webpack_require__, exports, module),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n/***/ }),\n\n/***/ \"6VY8\":\n/***/ (function(module, exports, __webpack_require__) {\n\nvar __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require) {\n\n    var quantile = __webpack_require__(\"GE/a\");\n\n    /**\n     * Is a method for computing the median value of a sorted array of numbers\n     * @param  {Array.<number>} data\n     * @return {number}\n     */\n    function median(data) {\n\n        return quantile(data, 0.5);\n    }\n\n    return median;\n\n}.call(exports, __webpack_require__, exports, module),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n/***/ }),\n\n/***/ \"8OXD\":\n/***/ (function(module, exports, __webpack_require__) {\n\nvar __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require) {\n\n    var array = __webpack_require__(\"TDOf\");\n    var isArray = array.isArray;\n    var size = array.size;\n    var number = __webpack_require__(\"FD0L\");\n    var isNumber = number.isNumber;\n\n    /**\n     * Data preprocessing, filter the wrong data object.\n     *  for example [12,] --- missing y value\n     *              [,12] --- missing x value\n     *              [12, b] --- incorrect y value\n     *              ['a', 12] --- incorrect x value\n     * @param  {Array.<Array>} data\n     * @return {Array.<Array.<number>>}\n     */\n    function dataPreprocess(data) {\n\n        if (!isArray(data)) {\n            throw new Error('Invalid data type, you should input an array');\n        }\n        var predata = [];\n        var arraySize = size(data);\n\n        if (arraySize.length === 1) {\n\n            for (var i = 0; i < arraySize[0]; i++) {\n\n                if (isNumber(data[i])) {\n                    predata.push(data[i]);\n                }\n            }\n        }\n        else if (arraySize.length === 2) {\n\n            for (var i = 0; i < arraySize[0]; i++) {\n\n                var isCorrect = true;\n                for (var j = 0; j < arraySize[1]; j++) {\n                    if (!isNumber(data[i][j])) {\n                        isCorrect = false;\n                    }\n                }\n                if (isCorrect) {\n                    predata.push(data[i]);\n                }\n            }\n        }\n        return predata;\n    }\n\n    return dataPreprocess;\n}.call(exports, __webpack_require__, exports, module),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n/***/ }),\n\n/***/ \"8sHD\":\n/***/ (function(module, exports, __webpack_require__) {\n\nvar $export   = __webpack_require__(\"kM2E\")\n  , $parseInt = __webpack_require__(\"KpO7\");\n// 20.1.2.13 Number.parseInt(string, radix)\n$export($export.S + $export.F * (Number.parseInt != $parseInt), 'Number', {parseInt: $parseInt});\n\n/***/ }),\n\n/***/ \"AdH9\":\n/***/ (function(module, exports, __webpack_require__) {\n\nvar __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require) {\n\n    var sum = __webpack_require__(\"/qwy\");\n\n    /**\n     * Is a method for computing the mean value of a list of numbers,\n     * which will filter other data types.\n     * @param  {Array.<number>} data\n     * @return {number}\n     */\n    function mean(data) {\n\n        var len = data.length;\n\n        if (!len) {\n            return 0;\n        }\n\n        return sum(data) / data.length;\n\n    }\n\n    return mean;\n\n\n}.call(exports, __webpack_require__, exports, module),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n/***/ }),\n\n/***/ \"CcTk\":\n/***/ (function(module, exports, __webpack_require__) {\n\nvar __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require) {\n\n    var statistics = {};\n\n    statistics.max = __webpack_require__(\"gSCM\");\n    statistics.deviation = __webpack_require__(\"aFh2\");\n    statistics.mean = __webpack_require__(\"AdH9\");\n    statistics.median = __webpack_require__(\"6VY8\");\n    statistics.min = __webpack_require__(\"Qn3C\");\n    statistics.max = __webpack_require__(\"GE/a\");\n    statistics.max = __webpack_require__(\"jhyr\");\n    statistics.sum = __webpack_require__(\"/qwy\");\n\n    return statistics;\n\n}.call(exports, __webpack_require__, exports, module),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n/***/ }),\n\n/***/ \"EEvw\":\n/***/ (function(module, exports, __webpack_require__) {\n\nvar __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require) {\n\n    /**\n     * Computing range array\n     * @param  {number} start\n     * @param  {number} stop\n     * @param  {number} step\n     * @return {Array.<number>}\n     */\n    return function (start, stop, step) {\n\n        var len = arguments.length;\n\n        if (len < 2) {\n            stop = start;\n            start = 0;\n            step = 1;\n        }\n        else if (len < 3) {\n            step = 1;\n        }\n        else {\n            step = +step;\n        }\n\n        var n = Math.ceil((stop - start) / step);\n        var range = new Array(n + 1);\n\n        for (var i = 0; i < n + 1; i++) {\n            range[i] = start + i * step;\n        }\n        return range;\n    };\n\n}.call(exports, __webpack_require__, exports, module),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n/***/ }),\n\n/***/ \"FD0L\":\n/***/ (function(module, exports, __webpack_require__) {\n\nvar __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require) {\n\n    /**\n     * Test whether value is a number.\n     * @param  {*}  value\n     * @return {boolean}\n     */\n    function isNumber(value) {\n\n        value = (value === null ? NaN : +value);\n        return typeof value === 'number' && !isNaN(value);\n    }\n\n    /**\n     * Test if a number is integer.\n     * @param  {number}  value\n     * @return {boolean}\n     */\n    function isInteger(value) {\n        return isFinite(value) && value === Math.round(value);\n    }\n\n    return {\n        isNumber: isNumber,\n        isInteger: isInteger\n    };\n\n}.call(exports, __webpack_require__, exports, module),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n/***/ }),\n\n/***/ \"GE/a\":\n/***/ (function(module, exports, __webpack_require__) {\n\nvar __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require) {\n\n    /**\n     * Estimating quantiles from a sorted sample of numbers\n     * @see https://en.wikipedia.org/wiki/Quantile#Estimating_quantiles_from_a_sample\n     * R-7 method\n     * @param  {Array.<number>} data  sorted array\n     * @param  {number} p\n     */\n    return function (data, p) {\n\n        var len = data.length;\n\n        if (!len) {\n            return 0;\n        }\n        if (p <= 0 || len < 2) {\n            return data[0];\n        }\n        if (p >= 1) {\n            return data[len -1];\n        }\n        // in the wikipedia's R-7 method h = (N - 1)p + 1, but here array index start from 0\n        var h = (len - 1) * p;\n        var i = Math.floor(h);\n        var a = data[i];\n        var b = data[i + 1];\n        return a + (b - a) * (h - i);\n    };\n\n}.call(exports, __webpack_require__, exports, module),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n/***/ }),\n\n/***/ \"KPhj\":\n/***/ (function(module, exports, __webpack_require__) {\n\nvar __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require) {\n\n    var dataPreprocess = __webpack_require__(\"8OXD\");\n\n    var regreMethods = {\n\n        /**\n         * Common linear regression algorithm\n         * @param  {Array.<Array.<number>>} data two-dimensional array\n         * @return {Object}\n         */\n        linear: function (data) {\n\n            var predata = dataPreprocess(data);\n            var sumX = 0;\n            var sumY = 0;\n            var sumXY = 0;\n            var sumXX = 0;\n            var len = predata.length;\n\n            for (var i = 0; i < len; i++) {\n                sumX += predata[i][0];\n                sumY += predata[i][1];\n                sumXY += predata[i][0] * predata[i][1];\n                sumXX += predata[i][0] * predata[i][0];\n            }\n\n            var gradient = ((len * sumXY) - (sumX * sumY)) / ((len * sumXX) - (sumX * sumX));\n            var intercept = (sumY / len) - ((gradient * sumX) / len);\n\n            var result = [];\n            for (var j = 0; j < predata.length; j++) {\n                var coordinate = [predata[j][0], gradient * predata[j][0] + intercept];\n                result.push(coordinate);\n            }\n\n            var string = 'y = ' + Math.round(gradient * 100) / 100 + 'x + ' + Math.round(intercept * 100) / 100;\n\n            return {\n                points: result,\n                parameter: {\n                    gradient: gradient,\n                    intercept: intercept\n                },\n                expression: string\n            };\n        },\n\n        /**\n         * If the raw data include [0,0] point, we should choose linearThroughOrigin\n         *   instead of linear.\n         * @param  {Array.<Array>} data  two-dimensional number array\n         * @return {Object}\n         */\n        linearThroughOrigin: function (data) {\n\n            var predata = dataPreprocess(data);\n            var sumXX = 0;\n            var sumXY = 0;\n\n            for (var i = 0; i < predata.length; i++) {\n                sumXX += predata[i][0] * predata[i][0];\n                sumXY += predata[i][0] * predata[i][1];\n            }\n\n            var gradient = sumXY / sumXX;\n            var result = [];\n\n            for (var j = 0; j < predata.length; j++) {\n                var coordinate = [predata[j][0], predata[j][0] * gradient];\n                result.push(coordinate);\n            }\n\n            var string = 'y = ' + Math.round(gradient * 100) / 100 + 'x';\n\n            return {\n                points: result,\n                parameter: {\n                    gradient: gradient\n                },\n                expression: string\n            };\n        },\n\n        /**\n         * Exponential regression\n         * @param  {Array.<Array.<number>>} data  two-dimensional number array\n         * @return {Object}\n         */\n        exponential: function (data) {\n\n            var predata = dataPreprocess(data);\n            var sumX = 0;\n            var sumY = 0;\n            var sumXXY = 0;\n            var sumYlny = 0;\n            var sumXYlny = 0;\n            var sumXY = 0;\n\n            for (var i = 0; i < predata.length; i++) {\n                sumX += predata[i][0];\n                sumY += predata[i][1];\n                sumXY += predata[i][0] * predata[i][1];\n                sumXXY += predata[i][0] * predata[i][0] * predata[i][1];\n                sumYlny += predata[i][1] * Math.log(predata[i][1]);\n                sumXYlny += predata[i][0] * predata[i][1] * Math.log(predata[i][1]);\n            }\n\n            var denominator = (sumY * sumXXY) - (sumXY * sumXY);\n            var coefficient = Math.pow(Math.E, (sumXXY * sumYlny - sumXY * sumXYlny) / denominator);\n            var index = (sumY * sumXYlny - sumXY * sumYlny) / denominator;\n            var result = [];\n\n            for (var j = 0; j < predata.length; j++) {\n                var coordinate = [predata[j][0], coefficient * Math.pow(Math.E, index * predata[j][0])];\n                result.push(coordinate);\n            }\n\n            var string = 'y = ' + Math.round(coefficient * 100) / 100 + 'e^(' + Math.round(index * 100) / 100 + 'x)';\n\n            return {\n                points: result,\n                parameter: {\n                    coefficient: coefficient,\n                    index: index\n                },\n                expression: string\n            };\n\n        },\n\n        /**\n         * Logarithmic regression\n         * @param  {Array.<Array.<number>>} data  two-dimensional number array\n         * @return {Object}\n         */\n        logarithmic: function (data) {\n\n            var predata = dataPreprocess(data);\n            var sumlnx = 0;\n            var sumYlnx = 0;\n            var sumY = 0;\n            var sumlnxlnx = 0;\n\n            for (var i = 0; i < predata.length; i++) {\n                sumlnx += Math.log(predata[i][0]);\n                sumYlnx += predata[i][1] * Math.log(predata[i][0]);\n                sumY += predata[i][1];\n                sumlnxlnx += Math.pow(Math.log(predata[i][0]), 2);\n            }\n\n            var gradient = (i * sumYlnx - sumY * sumlnx) / (i * sumlnxlnx - sumlnx * sumlnx);\n            var intercept = (sumY - gradient * sumlnx) / i;\n            var result = [];\n\n            for (var j = 0; j < predata.length; j++) {\n                var coordinate = [predata[j][0], gradient * Math.log(predata[j][0]) + intercept];\n                result.push(coordinate);\n            }\n\n            var string =\n                'y = '\n                + Math.round(intercept * 100) / 100\n                + ' + '\n                + Math.round(gradient * 100) / 100 + 'ln(x)';\n\n            return {\n                points: result,\n                parameter: {\n                    gradient: gradient,\n                    intercept: intercept\n                },\n                expression: string\n            };\n\n        },\n\n        /**\n         * Polynomial regression\n         * @param  {Array.<Array.<number>>} data  two-dimensional number array\n         * @param  {number} order  order of polynomials\n         * @return {Object}\n         */\n        polynomial: function (data, order) {\n\n            var predata = dataPreprocess(data);\n            if (typeof order === 'undefined') {\n                order = 2;\n            }\n            //coefficient matrix\n            var coeMatrix = [];\n            var lhs = [];\n            var k = order + 1;\n\n            for (var i = 0; i < k; i++) {\n                var sumA = 0;\n                for (var n = 0; n < predata.length; n++) {\n                    sumA += predata[n][1] * Math.pow(predata[n][0], i);\n                }\n                lhs.push(sumA);\n\n                var temp = [];\n                for (var j = 0; j < k; j++) {\n                    var sumB = 0;\n                    for (var m = 0; m < predata.length; m++) {\n                        sumB += Math.pow(predata[m][0], i + j);\n                    }\n                    temp.push(sumB);\n                }\n                coeMatrix.push(temp);\n            }\n            coeMatrix.push(lhs);\n\n            var coeArray = gaussianElimination(coeMatrix, k);\n\n            var result = [];\n\n            for (var i = 0; i < predata.length; i++) {\n                var value = 0;\n                for (var n = 0; n < coeArray.length; n++) {\n                    value += coeArray[n] * Math.pow(predata[i][0], n);\n                }\n                result.push([predata[i][0], value]);\n            }\n\n            var string = 'y = ';\n            for (var i = coeArray.length - 1; i >= 0; i--) {\n                if (i > 1) {\n                    string += Math.round(coeArray[i] * Math.pow(10, i + 1)) / Math.pow(10, i + 1) + 'x^' + i + ' + ';\n                }\n                else if (i === 1) {\n                    string += Math.round(coeArray[i] * 100) / 100 + 'x' + ' + ';\n                }\n                else {\n                    string += Math.round(coeArray[i] * 100) / 100;\n                }\n            }\n\n            return {\n                points: result,\n                parameter: coeArray,\n                expression: string\n            };\n\n        }\n\n    };\n\n    /**\n     * Gaussian elimination\n     * @param  {Array.<Array.<number>>} matrix   two-dimensional number array\n     * @param  {number} number\n     * @return {Array}\n     */\n    function gaussianElimination(matrix, number) {\n\n        for (var i = 0; i < matrix.length - 1; i++) {\n            var maxColumn = i;\n            for (var j = i + 1; j < matrix.length - 1; j++) {\n                if (Math.abs(matrix[i][j]) > Math.abs(matrix[i][maxColumn])) {\n                    maxColumn = j;\n                }\n            }\n            // the matrix here is the transpose of the common Augmented matrix.\n            //  so the can perform the primary column transform, in fact, equivalent\n            //  to the primary line changes\n            for (var k = i; k < matrix.length; k++) {\n                var temp = matrix[k][i];\n                matrix[k][i] = matrix[k][maxColumn];\n                matrix[k][maxColumn] = temp;\n            }\n            for (var n = i + 1; n < matrix.length - 1; n++) {\n                for (var m = matrix.length - 1; m >= i; m--) {\n                    matrix[m][n] -= matrix[m][i] / matrix[i][i] * matrix[i][n];\n                }\n            }\n        }\n\n        var data = new Array(number);\n        var len = matrix.length - 1;\n        for (var j = matrix.length - 2; j >= 0; j--) {\n            var temp = 0;\n            for (var i = j + 1; i < matrix.length - 1; i++) {\n                temp += matrix[i][j] * data[i];\n            }\n            data[j] = (matrix[len][j] - temp) / matrix[j][j];\n\n        }\n\n        return data;\n    }\n\n    var regression = function (regreMethod, data, order) {\n\n        return regreMethods[regreMethod](data, order);\n\n    };\n\n    return regression;\n\n}.call(exports, __webpack_require__, exports, module),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n/***/ }),\n\n/***/ \"KpO7\":\n/***/ (function(module, exports, __webpack_require__) {\n\nvar $parseInt = __webpack_require__(\"7KvD\").parseInt\n  , $trim     = __webpack_require__(\"mnVu\").trim\n  , ws        = __webpack_require__(\"hyta\")\n  , hex       = /^[\\-+]?0[xX]/;\n\nmodule.exports = $parseInt(ws + '08') !== 8 || $parseInt(ws + '0x16') !== 22 ? function parseInt(str, radix){\n  var string = $trim(String(str), 3);\n  return $parseInt(string, (radix >>> 0) || (hex.test(string) ? 16 : 10));\n} : $parseInt;\n\n/***/ }),\n\n/***/ \"Laaf\":\n/***/ (function(module, exports) {\n\nmodule.exports={render:function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _c('div', {\n    staticClass: \"chart2\",\n    attrs: {\n      \"name\": \"Chart2\"\n    }\n  }, [_c('div', {\n    staticClass: \"data-area\"\n  }, [_c('div', {\n    staticClass: \"clearfix\"\n  }, _vm._l((_vm.trueLength), function(item, index) {\n    return _c('div', {\n      key: index,\n      staticClass: \"form-group col-xs-3 col-md-3\"\n    }, [_c('input', {\n      directives: [{\n        name: \"model\",\n        rawName: \"v-model\",\n        value: (_vm.data[index][0]),\n        expression: \"data[index][0]\"\n      }],\n      staticClass: \"form-control\",\n      attrs: {\n        \"type\": \"number\"\n      },\n      domProps: {\n        \"value\": (_vm.data[index][0])\n      },\n      on: {\n        \"keyup\": function($event) {\n          if (!('button' in $event) && _vm._k($event.keyCode, \"enter\", 13)) { return null; }\n          _vm.indexChange(_vm.data[index][0], index)\n        },\n        \"input\": function($event) {\n          if ($event.target.composing) { return; }\n          var $$exp = _vm.data[index],\n            $$idx = 0;\n          if (!Array.isArray($$exp)) {\n            _vm.data[index][0] = $event.target.value\n          } else {\n            $$exp.splice($$idx, 1, $event.target.value)\n          }\n        },\n        \"blur\": function($event) {\n          _vm.$forceUpdate()\n        }\n      }\n    }), _c('input', {\n      directives: [{\n        name: \"model\",\n        rawName: \"v-model\",\n        value: (_vm.data[index][1]),\n        expression: \"data[index][1]\"\n      }],\n      staticClass: \"form-control\",\n      attrs: {\n        \"type\": \"number\"\n      },\n      domProps: {\n        \"value\": (_vm.data[index][1])\n      },\n      on: {\n        \"input\": function($event) {\n          if ($event.target.composing) { return; }\n          var $$exp = _vm.data[index],\n            $$idx = 1;\n          if (!Array.isArray($$exp)) {\n            _vm.data[index][1] = $event.target.value\n          } else {\n            $$exp.splice($$idx, 1, $event.target.value)\n          }\n        },\n        \"blur\": function($event) {\n          _vm.$forceUpdate()\n        }\n      }\n    })])\n  })), _vm._v(\" \"), _c('div', {\n    staticClass: \"clearfix\"\n  }, [_c('div', {\n    staticClass: \"form-group col-xs-12 col-md-12\"\n  }, [_c('label', [_vm._v(\"Length\")]), _vm._v(\" \"), _c('input', {\n    directives: [{\n      name: \"model\",\n      rawName: \"v-model\",\n      value: (_vm.length),\n      expression: \"length\"\n    }],\n    attrs: {\n      \"type\": \"text\",\n      \"maxlength\": \"2\"\n    },\n    domProps: {\n      \"value\": (_vm.length)\n    },\n    on: {\n      \"keyup\": function($event) {\n        if (!('button' in $event) && _vm._k($event.keyCode, \"enter\", 13)) { return null; }\n        _vm.reset($event)\n      },\n      \"input\": function($event) {\n        if ($event.target.composing) { return; }\n        _vm.length = $event.target.value\n      }\n    }\n  }), _vm._v(\" \"), _c('button', {\n    staticClass: \"btn btn-sm btn-info\",\n    on: {\n      \"click\": _vm.reset\n    }\n  }, [_vm._v(\"Reset\")]), _vm._v(\" \"), _c('button', {\n    staticClass: \"btn btn-sm btn-success\",\n    on: {\n      \"click\": _vm.initCharts\n    }\n  }, [_vm._v(\"Paint\")])])])]), _vm._v(\" \"), _c('div', {\n    staticClass: \"chart-ctn\",\n    attrs: {\n      \"id\": \"chartsCtn\"\n    }\n  })])\n},staticRenderFns: []}\n\n/***/ }),\n\n/***/ \"Qn3C\":\n/***/ (function(module, exports, __webpack_require__) {\n\nvar __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require) {\n\n    var number = __webpack_require__(\"FD0L\");\n    var isNumber = number.isNumber;\n\n    /**\n     * Is a method for computing the min value of a list of numbers,\n     * which will filter other data types.\n     * @param  {Array.<number>} data\n     * @return {number}\n     */\n    function min(data) {\n\n        var minData = Infinity;\n        for (var i = 0; i < data.length; i++) {\n            if (isNumber(data[i]) && data[i] < minData) {\n                minData = data[i];\n            }\n        }\n        return minData;\n    }\n\n    return min;\n\n}.call(exports, __webpack_require__, exports, module),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n/***/ }),\n\n/***/ \"QxJS\":\n/***/ (function(module, __webpack_exports__, __webpack_require__) {\n\n\"use strict\";\nObject.defineProperty(__webpack_exports__, \"__esModule\", { value: true });\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_babel_runtime_core_js_number_parse_int__ = __webpack_require__(\"gBtx\");\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_babel_runtime_core_js_number_parse_int___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_babel_runtime_core_js_number_parse_int__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_echarts__ = __webpack_require__(\"XLwt\");\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_echarts___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_echarts__);\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_echarts_stat__ = __webpack_require__(\"siuG\");\n/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_echarts_stat___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2_echarts_stat__);\n\n\n\n\n\nvar initData = function initData(length) {\n  var array = [];\n  for (var i = 0; i < length; i++) {\n    array.push([i, '']);\n  }\n  return array;\n};\nvar fetchData = function fetchData(data) {\n  var array = [];\n  for (var i = 0, l = data.length; i < l; i++) {\n    if (data[i][1]) {\n      array.push(data[i]);\n    } else {\n      break;\n    }\n  }\n  return array;\n};\n/* harmony default export */ __webpack_exports__[\"default\"] = ({\n  name: 'chart2',\n  data: function data() {\n    return {\n      data: [],\n      length: 12,\n      trueLength: 12\n    };\n  },\n\n  methods: {\n    reset: function reset() {\n      console.log(this.length);\n      this.trueLength = __WEBPACK_IMPORTED_MODULE_0_babel_runtime_core_js_number_parse_int___default()(this.length);\n      this.data = initData(this.trueLength);\n    },\n    indexChange: function indexChange(number, index) {\n      number = __WEBPACK_IMPORTED_MODULE_0_babel_runtime_core_js_number_parse_int___default()(number);\n      this.data = this.data.map(function (item, i) {\n        if (i > index) {\n          item[0] = number + i - index;\n          return item;\n        } else {\n          return item;\n        }\n      });\n    },\n    initCharts: function initCharts() {\n      var target = fetchData(this.data);\n      var myRegression = __WEBPACK_IMPORTED_MODULE_2_echarts_stat___default.a.regression('polynomial', target, 3);\n      myRegression.points.sort(function (a, b) {\n        return a[0] - b[0];\n      });\n\n      var myCharts = __WEBPACK_IMPORTED_MODULE_1_echarts___default.a.init(document.getElementById('chartsCtn'));\n      myCharts.setOption({\n        toolbox: {\n          feature: {\n            saveAsImage: {}\n          }\n        },\n        xAxis: {\n          type: 'value',\n          splitLine: {\n            lineStyle: {\n              type: 'dashed'\n            }\n          },\n          max: 'dataMax',\n          min: 'dataMin'\n        },\n        yAxis: {\n          type: 'value',\n          splitLine: {\n            lineStyle: {\n              type: 'dashed'\n            }\n          },\n          max: 'dataMax',\n          min: 'dataMin'\n        },\n        series: [{\n          name: 'data',\n          type: 'line',\n          data: target\n        }, {\n          name: 'standard',\n          type: 'line',\n          data: myRegression.points,\n          markPoint: {\n            itemStyle: {\n              normal: {\n                color: 'transparent'\n              }\n            },\n            label: {\n              normal: {\n                show: true,\n                position: 'left',\n                formatter: myRegression.expression,\n                textStyle: {\n                  color: '#333',\n                  fontSize: 14\n                }\n              }\n            },\n            data: [{\n              coord: myRegression.points[myRegression.points.length - 1]\n            }]\n          }\n        }]\n      });\n    }\n  },\n  created: function created() {\n    this.data = initData(this.length);\n  }\n});\n\n/***/ }),\n\n/***/ \"TDOf\":\n/***/ (function(module, exports, __webpack_require__) {\n\nvar __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require) {\n\n    var objToString = Object.prototype.toString;\n    var arrayProto = Array.prototype;\n    var nativeMap = arrayProto.map;\n\n    /**\n     * Get the size of a array\n     * @param  {Array} data\n     * @return {Array}\n     */\n    function size(data) {\n        var s = [];\n        while (isArray(data)) {\n            s.push(data.length);\n            data = data[0];\n        }\n        return s;\n    }\n\n    /**\n     * @param {*}  value\n     * @return {boolean}\n     */\n    function isArray(value) {\n        return objToString.call(value) === '[object Array]';\n    }\n\n    /**\n     * constructs a (m x n) array with all values 0\n     * @param  {number} m  the row\n     * @param  {number} n  the column\n     * @return {Array}\n     */\n    function zeros(m, n) {\n        var zeroArray = [];\n        for (var i = 0; i < m ; i++) {\n            zeroArray[i] = [];\n            for (var j = 0; j < n; j++) {\n                zeroArray[i][j] = 0;\n            }\n        }\n        return zeroArray;\n    }\n\n    /**\n     * Sums each element in the array.\n     * Internal use, for performance considerations, to avoid\n     * unnecessary judgments and calculations.\n     * @param  {Array} vector\n     * @return {number}\n     */\n    function sum(vector) {\n        var sum = 0;\n        for (var i = 0; i < vector.length; i++) {\n            sum += vector[i];\n        }\n        return sum;\n    }\n\n    /**\n     * Computes the sum of the specified column elements in a two-dimensional array\n     * @param  {Array.<Array>} dataList  two-dimensional array\n     * @param  {number} n  the specified column, zero-based\n     * @return {number}\n     */\n    function sumOfColumn(dataList, n) {\n        var sum = 0;\n        for (var i = 0; i < dataList.length; i++) {\n            sum += dataList[i][n];\n        }\n        return sum;\n    }\n\n\n    function ascending(a, b) {\n\n        return a > b ? 1 : a < b ? -1 : a === b ? 0 : NaN;\n\n    }\n\n    /**\n     * Binary search algorithm --- this bisector is specidfied to histogram, which every bin like that [a, b),\n     * so the return value use to add 1.\n     * @param  {Array.<number>} array\n     * @param  {number} value\n     * @param  {number} start\n     * @param  {number} end\n     * @return {number}\n     */\n    function bisect(array, value, start, end) { //移出去\n\n        if (start == null) {\n            start = 0;\n        }\n        if (end == null) {\n            end = array.length;\n        }\n        while (start < end) {\n            var mid = Math.floor((start + end) / 2);\n            var compare = ascending(array[mid], value);\n            if (compare > 0) {\n                end = mid;\n            }\n            else if (compare < 0) {\n                start = mid + 1;\n            }\n            else {\n                return mid + 1;\n            }\n        }\n        return start;\n    }\n\n    /**\n     * 数组映射\n     * @memberOf module:zrender/core/util\n     * @param {Array} obj\n     * @param {Function} cb\n     * @param {*} [context]\n     * @return {Array}\n     */\n    function map(obj, cb, context) {\n        if (!(obj && cb)) {\n            return;\n        }\n        if (obj.map && obj.map === nativeMap) {\n            return obj.map(cb, context);\n        }\n        else {\n            var result = [];\n            for (var i = 0, len = obj.length; i < len; i++) {\n                result.push(cb.call(context, obj[i], i, obj));\n            }\n            return result;\n        }\n    }\n\n\n    return {\n        size: size,\n        isArray: isArray,\n        zeros: zeros,\n        sum: sum,\n        sumOfColumn: sumOfColumn,\n        ascending: ascending,\n        bisect: bisect,\n        map: map\n    };\n\n}.call(exports, __webpack_require__, exports, module),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n/***/ }),\n\n/***/ \"VofG\":\n/***/ (function(module, exports, __webpack_require__) {\n\nvar __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require) {\n\n    /**\n     * Computing the length of step\n     * @see  https://github.com/d3/d3-array/blob/master/src/ticks.js\n     * @param {number} start\n     * @param {number} stop\n     * @param {number} count\n     */\n    return function (start, stop, count) {\n\n        var step0 = Math.abs(stop - start) / count;\n        var step1 = Math.pow(10, Math.floor(Math.log(step0) / Math.LN10));\n        var error = step0 / step1;\n\n        if (error >= Math.sqrt(50)) {\n            step1 *= 10;\n        }\n        else if (error >= Math.sqrt(10)) {\n            step1 *= 5;\n        }\n        else if(error >= Math.sqrt(2)) {\n            step1 *= 2;\n        }\n        return stop >= start ? step1 : -step1;\n\n    };\n\n}.call(exports, __webpack_require__, exports, module),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n\n/***/ }),\n\n/***/ \"YNOL\":\n/***/ (function(module, exports, __webpack_require__) {\n\n\n/* styles */\n__webpack_require__(\"kXkD\")\n\nvar Component = __webpack_require__(\"VU/8\")(\n  /* script */\n  __webpack_require__(\"QxJS\"),\n  /* template */\n  __webpack_require__(\"Laaf\"),\n  /* scopeId */\n  \"data-v-3570880a\",\n  /* cssModules */\n  null\n)\n\nmodule.exports = Component.exports\n\n\n/***/ }),\n\n/***/ \"aFh2\":\n/***/ (function(module, exports, __webpack_require__) {\n\nvar __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require) {\n\n    var variance = __webpack_require__(\"jhyr\");\n\n    /**\n     * Computing the deviation\n     * @param  {Array.<number>} data\n     * @return {number}\n     */\n    return function (data) {\n\n        var squaredDeviation = variance(data);\n\n        return squaredDeviation ? Math.sqrt(squaredDeviation) : squaredDeviation;\n    };\n}.call(exports, __webpack_require__, exports, module),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n/***/ }),\n\n/***/ \"gBtx\":\n/***/ (function(module, exports, __webpack_require__) {\n\nmodule.exports = { \"default\": __webpack_require__(\"qrpI\"), __esModule: true };\n\n/***/ }),\n\n/***/ \"gSCM\":\n/***/ (function(module, exports, __webpack_require__) {\n\nvar __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require) {\n\n    var number = __webpack_require__(\"FD0L\");\n    var isNumber = number.isNumber;\n\n    /**\n     * Is a method for computing the max value of a list of numbers,\n     * which will filter other data types.\n     * @param  {Array.<number>} data\n     * @return {number}\n     */\n    function max(data) {\n\n        var maxData = -Infinity;\n        for (var i = 0; i < data.length; i++) {\n            if (isNumber(data[i]) && data[i] > maxData) {\n                maxData = data[i];\n            }\n        }\n        return maxData;\n    }\n\n    return max;\n\n}.call(exports, __webpack_require__, exports, module),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n/***/ }),\n\n/***/ \"hyta\":\n/***/ (function(module, exports) {\n\nmodule.exports = '\\x09\\x0A\\x0B\\x0C\\x0D\\x20\\xA0\\u1680\\u180E\\u2000\\u2001\\u2002\\u2003' +\n  '\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200A\\u202F\\u205F\\u3000\\u2028\\u2029\\uFEFF';\n\n/***/ }),\n\n/***/ \"iU7c\":\n/***/ (function(module, exports, __webpack_require__) {\n\nvar __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require) {\n\n    var dataPreprocess = __webpack_require__(\"8OXD\");\n    var array = __webpack_require__(\"TDOf\");\n    var arraySize = array.size;\n    var sumOfColumn = array.sumOfColumn;\n    var arraySum = array.sum;\n    var zeros = array.zeros;\n    var isArray = array.isArray;\n    var mathSqrt = Math.sqrt;\n    var mathPow = Math.pow;\n\n    /**\n     * KMeans of clustering algorithm\n     * @param  {Array.<Array.<number>>} data  two-dimension array\n     * @param  {number} k   the number of clusters in a dataset\n     * @return {Object}\n     */\n    function kMeans(data, k) {\n\n        var size = arraySize(data);\n        // create array to assign data points to centroids, also holds SE of each point\n        var clusterAssigned = zeros(size[0], 2);\n        var centroids = createRandCent(data, k);\n        var clusterChanged = true;\n        var minDist;\n        var minIndex;\n        var distIJ;\n        var ptsInClust;\n\n        while (clusterChanged) {\n            clusterChanged = false;\n            for (var i = 0; i < size[0]; i++) {\n                minDist = Infinity;\n                minIndex = -1;\n                for (var j = 0; j < k; j++) {\n                    distIJ = distEuclid(data[i], centroids[j]);\n                    if (distIJ < minDist) {\n                        minDist = distIJ;\n                        minIndex = j;\n                    }\n                }\n                if (clusterAssigned[i][0] !== minIndex) {\n                    clusterChanged = true;\n                }\n                clusterAssigned[i][0] = minIndex;\n                clusterAssigned[i][1] = mathPow(minDist, 2);\n            }\n            //recalculate centroids\n            for (var i = 0; i < k; i++) {\n                ptsInClust = [];\n                for (var j = 0; j < clusterAssigned.length; j++) {\n                    if (clusterAssigned[j][0] === i) {\n                        ptsInClust.push(data[j]);\n                    }\n                }\n                centroids[i] = meanInColumns(ptsInClust);\n            }\n        }\n\n        var clusterWithKmeans = {\n            centroids: centroids,\n            clusterAssigned: clusterAssigned\n        };\n        return clusterWithKmeans;\n    }\n\n    /**\n     * Calculate the average of each column in a two-dimensional array\n     *  and returns the values as an array.\n     * @param  {Array.<Array>} dataList two-dimensional array\n     * @return {Array}\n     */\n    function meanInColumns(dataList) {\n\n        var size = arraySize(dataList);\n        var meanArray = [];\n        var sum;\n        var mean;\n        for (var j = 0; j < size[1]; j++) {\n            sum = 0;\n            for (var i = 0; i < size[0]; i++) {\n                sum += dataList[i][j];\n            }\n            mean = sum / size[0];\n            meanArray.push(mean);\n        }\n        return meanArray;\n    }\n\n    /**\n     * The combine of hierarchical clustering and k-means.\n     * @param  {Array} data   two-dimension array.\n     * @param  {[type]} k   the number of clusters in a dataset\n     * @param  {boolean}  stepByStep\n     * @return {}\n     */\n    function hierarchicalKMeans(data, k, stepByStep) {\n\n        var dataSet = dataPreprocess(data);\n        var size = arraySize(dataSet);\n        var clusterAssment = zeros(size[0], 2);\n        // initial center point\n        var centroid0 = meanInColumns(dataSet);\n        var centList = [centroid0];\n        var squareError;\n        for (var i = 0; i < size[0]; i++) {\n            squareError = distEuclid(dataSet[i], centroid0);\n            clusterAssment[i][1] = mathPow(squareError, 2);\n        }\n        var lowestSSE;\n        var ptsInClust;\n        var ptsNotClust;\n        var clusterInfo;\n        var sseSplit;\n        var sseNotSplit;\n        var index = 1;\n        var result = {\n            isEnd: false\n        };\n\n        function oneStep() {\n            //the existing clusters are continuously divided\n            //until the number of clusters is k\n            if (index < k) {\n                lowestSSE = Infinity;\n                var centSplit;\n                var newCentroid;\n                var newClusterAss;\n\n                for (var j = 0; j < centList.length; j++) {\n                    ptsInClust = [];\n                    ptsNotClust = [];\n                    for (var i = 0; i < clusterAssment.length; i++) {\n                        if (clusterAssment[i][0] === j) {\n                            ptsInClust.push(dataSet[i]);\n                        }\n                        else {\n                            ptsNotClust.push(clusterAssment[i][1]);\n                        }\n                    }\n                    clusterInfo = kMeans(ptsInClust, 2);\n                    sseSplit = sumOfColumn(clusterInfo.clusterAssigned, 1);\n                    sseNotSplit = arraySum(ptsNotClust);\n                    if (sseSplit + sseNotSplit < lowestSSE) {\n                        lowestSSE = sseNotSplit + sseSplit;\n                        centSplit = j;\n                        newCentroid = clusterInfo.centroids;\n                        newClusterAss = clusterInfo.clusterAssigned;\n                    }\n                }\n\n                for (var i = 0; i < newClusterAss.length; i++) {\n                    if (newClusterAss[i][0] === 0) {\n                        newClusterAss[i][0] = centSplit;\n                    }\n                    else if (newClusterAss[i][0] === 1) {\n                        newClusterAss[i][0] = centList.length;\n                    }\n                }\n\n                centList[centSplit] = newCentroid[0];\n                centList.push(newCentroid[1]);\n                for ( i = 0, j = 0; i < clusterAssment.length && j < newClusterAss.length; i++) {\n                    if (clusterAssment[i][0] === centSplit) {\n                        clusterAssment[i][0] = newClusterAss[j][0];\n                        clusterAssment[i][1] = newClusterAss[j++][1];\n                    }\n                }\n\n                var pointInClust = [];\n                for (var i = 0; i < centList.length; i++) {\n                    pointInClust[i] = [];\n                    for (var j = 0; j < clusterAssment.length; j++) {\n                        if (clusterAssment[j][0] === i) {\n                            pointInClust[i].push(dataSet[j]);\n                        }\n                    }\n                }\n\n                result.clusterAssment = clusterAssment;\n                result.centroids = centList;\n                result.pointsInCluster = pointInClust;\n\n\n                index++;\n            }\n            else {\n                result.isEnd = true;\n            }\n\n            return result;\n        }\n\n        var step = {\n            next: oneStep\n        };\n\n        if (!stepByStep) {\n            var result;\n            while (!(result = step.next()).isEnd);\n            return result;\n        }\n        else {\n            return step;\n        }\n\n    }\n\n    /**\n     * Create random centroid of kmeans.\n     * @param  {Array.<number>} dataSet  two-dimension array\n     * @param  {number} k   the number of centroids to be created\n     * @return {Array.<number>}   random centroids of kmeans\n     */\n    function createRandCent(dataSet, k) {\n        var size = arraySize(dataSet);\n        //constructs a two-dimensional array with all values 0\n        var centroids = zeros(k, size[1]);\n        var minJ;\n        var maxJ;\n        var rangeJ;\n        //create random cluster centers, within bounds of each dimension\n        for (var j = 0; j < size[1]; j++) {\n            minJ = dataSet[0][j];\n            maxJ = dataSet[0][j];\n            for (var i = 1; i < size[0]; i++) {\n                if (dataSet[i][j] < minJ) {\n                    minJ = dataSet[i][j];\n                }\n                if (dataSet[i][j] > maxJ) {\n                    maxJ = dataSet[i][j];\n                }\n            }\n            rangeJ = maxJ - minJ;\n            for (var i = 0; i < k; i++) {\n                centroids[i][j] = minJ + rangeJ * Math.random();\n            }\n        }\n        return centroids;\n    }\n\n    /**\n     * Distance method for calculating similarity\n     * @param  {Array.<number>}  vec1\n     * @param  {Array.<nnumber>}  vec2\n     * @return {number}\n     */\n    function distEuclid(vec1, vec2) {\n\n        if (!isArray(vec1) && !isArray(vec2)) {\n            return mathSqrt(mathPow(vec1 - vec2, 2));\n        }\n\n        var powerSum = 0;\n        //subtract the corresponding elements in the vectors\n        for (var i = 0; i < vec1.length; i++) {\n            powerSum += mathPow(vec1[i] - vec2[i], 2);\n        }\n\n        return mathSqrt(powerSum);\n    }\n\n    return {\n        kMeans: kMeans,\n        hierarchicalKMeans: hierarchicalKMeans\n    };\n\n}.call(exports, __webpack_require__, exports, module),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n/***/ }),\n\n/***/ \"jhyr\":\n/***/ (function(module, exports, __webpack_require__) {\n\nvar __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require) {\n\n    var number = __webpack_require__(\"FD0L\");\n    var isNumber = number.isNumber;\n    var mean = __webpack_require__(\"AdH9\");\n\n    /**\n     * Computing the variance of list of sample\n     * @param  {Array.<number>} data\n     * @return {number}\n     */\n    function sampleVariance(data) {\n\n        var len = data.length;\n        if (!len || len < 2) {\n            return 0;\n        }\n        if (data.length >= 2) {\n\n            var meanValue = mean(data);\n            var sum = 0;\n            var temple;\n\n            for (var i = 0; i < data.length; i++) {\n                if (isNumber(data[i])) {\n                    temple = data[i] - meanValue;\n                    sum += temple * temple;\n                }\n            }\n            return sum / data.length - 1;\n        }\n    }\n\n    return sampleVariance;\n\n}.call(exports, __webpack_require__, exports, module),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n/***/ }),\n\n/***/ \"kXkD\":\n/***/ (function(module, exports, __webpack_require__) {\n\n// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = __webpack_require__(\"nF0Y\");\nif(typeof content === 'string') content = [[module.i, content, '']];\nif(content.locals) module.exports = content.locals;\n// add the styles to the DOM\nvar update = __webpack_require__(\"rjj0\")(\"0ca2cf9a\", content, true);\n\n/***/ }),\n\n/***/ \"mnVu\":\n/***/ (function(module, exports, __webpack_require__) {\n\nvar $export = __webpack_require__(\"kM2E\")\n  , defined = __webpack_require__(\"52gC\")\n  , fails   = __webpack_require__(\"S82l\")\n  , spaces  = __webpack_require__(\"hyta\")\n  , space   = '[' + spaces + ']'\n  , non     = '\\u200b\\u0085'\n  , ltrim   = RegExp('^' + space + space + '*')\n  , rtrim   = RegExp(space + space + '*$');\n\nvar exporter = function(KEY, exec, ALIAS){\n  var exp   = {};\n  var FORCE = fails(function(){\n    return !!spaces[KEY]() || non[KEY]() != non;\n  });\n  var fn = exp[KEY] = FORCE ? exec(trim) : spaces[KEY];\n  if(ALIAS)exp[ALIAS] = fn;\n  $export($export.P + $export.F * FORCE, 'String', exp);\n};\n\n// 1 -> String#trimLeft\n// 2 -> String#trimRight\n// 3 -> String#trim\nvar trim = exporter.trim = function(string, TYPE){\n  string = String(defined(string));\n  if(TYPE & 1)string = string.replace(ltrim, '');\n  if(TYPE & 2)string = string.replace(rtrim, '');\n  return string;\n};\n\nmodule.exports = exporter;\n\n/***/ }),\n\n/***/ \"nF0Y\":\n/***/ (function(module, exports, __webpack_require__) {\n\nexports = module.exports = __webpack_require__(\"FZ+f\")();\n// imports\n\n\n// module\nexports.push([module.i, \"\\n.chart2[data-v-3570880a] {\\n  display: -ms-flexbox;\\n  display: flex;\\n  -ms-flex-direction: column;\\n      flex-direction: column;\\n  height: 100%;\\n}\\n.chart2 input[data-v-3570880a] {\\n    text-align: center !important;\\n}\\n.chart-ctn[data-v-3570880a] {\\n  height: 480px;\\n  width: 100%;\\n}\\n\", \"\", {\"version\":3,\"sources\":[\"D:/Mr_SPM/vue/src/components/Chart2.vue\"],\"names\":[],\"mappings\":\";AACA;EACE,qBAAqB;EACrB,cAAc;EACd,2BAA2B;MACvB,uBAAuB;EAC3B,aAAa;CACd;AACD;IACI,8BAA8B;CACjC;AACD;EACE,cAAc;EACd,YAAY;CACb\",\"file\":\"Chart2.vue\",\"sourcesContent\":[\"\\n.chart2[data-v-3570880a] {\\n  display: -ms-flexbox;\\n  display: flex;\\n  -ms-flex-direction: column;\\n      flex-direction: column;\\n  height: 100%;\\n}\\n.chart2 input[data-v-3570880a] {\\n    text-align: center !important;\\n}\\n.chart-ctn[data-v-3570880a] {\\n  height: 480px;\\n  width: 100%;\\n}\\n\"],\"sourceRoot\":\"\"}]);\n\n// exports\n\n\n/***/ }),\n\n/***/ \"oooa\":\n/***/ (function(module, exports, __webpack_require__) {\n\nvar __WEBPACK_AMD_DEFINE_RESULT__;!(__WEBPACK_AMD_DEFINE_RESULT__ = function (require) {\n\n    var max = __webpack_require__(\"gSCM\");\n    var min = __webpack_require__(\"Qn3C\");\n    var quantile = __webpack_require__(\"GE/a\");\n    var deviation = __webpack_require__(\"aFh2\");\n    var dataPreprocess = __webpack_require__(\"8OXD\");\n    var array = __webpack_require__(\"TDOf\");\n    var ascending = array.ascending;\n    var map = array.map;\n    var range = __webpack_require__(\"EEvw\");\n    var bisect = array.bisect;\n    var tickStep = __webpack_require__(\"VofG\");\n\n    /**\n     * Compute bins for histogram\n     * @param  {Array.<number>} data\n     * @param  {string} threshold\n     * @return {Object}\n     */\n    function computeBins(data, threshold) {\n\n        if (threshold == null) {\n\n            threshold = thresholdMethod.squareRoot;\n\n        }\n        else {\n\n            threshold = thresholdMethod[threshold];\n\n        }\n        var values = dataPreprocess(data);\n        var maxValue = max(values);\n        var minValue = min(values);\n\n        var binsNumber = threshold(values, minValue, maxValue);\n\n        var step = tickStep(minValue, maxValue, binsNumber);\n\n        // return the xAxis coordinate for each bins, except the end point of the value\n        var rangeArray = range(Math.ceil(minValue / step) * step, Math.floor(maxValue / step) * step, step);\n\n        var len = rangeArray.length;\n\n        var bins = new Array(len + 1);\n\n        for (var i = 0; i <= len; i++) {\n            bins[i] = {};\n            bins[i].sample = [];\n            bins[i].x0 = i > 0 // 不要数组直接挂属性，改成Object\n                ? rangeArray[i - 1]\n                : (rangeArray[i] - minValue) === step\n                ? minValue\n                : (rangeArray[i] - step);\n            bins[i].x1 = i < len\n                ? rangeArray[i]\n                : (maxValue - rangeArray[i-1]) === step\n                ? maxValue\n                : rangeArray[i - 1] + step;\n        }\n\n        for (var i = 0; i < values.length; i++) {\n            if (minValue <= values[i] && values[i] <= maxValue) {\n                bins[bisect(rangeArray, values[i], 0, len)].sample.push(values[i]);\n            }\n        }\n\n        var data = map(bins, function (bin) {\n            return [(bin.x0 + bin.x1) / 2, bin.sample.length];\n        });\n\n        return {\n            bins: bins,\n            data: data\n        };\n    }\n\n\n    /**\n     * Four kinds of threshold methods used to\n     * compute how much bins the histogram should be divided\n     * @see  https://en.wikipedia.org/wiki/Histogram\n     * @type {Object}\n     */\n    var thresholdMethod = {\n\n        squareRoot: function (data) {\n\n            var bins = Math.ceil(Math.sqrt(data.length));\n\n            return bins > 50 ? 50 : bins;\n        },\n\n        scott: function (data, min, max) {\n\n            return Math.ceil((max - min) / (3.5 * deviation(data) * Math.pow(data.length, -1 / 3)));\n        },\n\n        freedmanDiaconis: function (data, min, max) {\n\n            data.sort(ascending);\n\n            return Math.ceil(\n                (max - min) / (2 * (quantile(data, 0.75) - quantile(data, 0.25)) * Math.pow(data.length, -1 / 3))\n            );\n        },\n\n        sturges: function (data) {\n\n            return Math.ceil(Math.log(data.length) / Math.LN2) + 1;\n\n        }\n    };\n\n    return computeBins;\n\n}.call(exports, __webpack_require__, exports, module),\n\t\t\t\t__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));\n\n/***/ }),\n\n/***/ \"qrpI\":\n/***/ (function(module, exports, __webpack_require__) {\n\n__webpack_require__(\"8sHD\");\nmodule.exports = parseInt;\n\n/***/ }),\n\n/***/ \"siuG\":\n/***/ (function(module, exports, __webpack_require__) {\n\nmodule.exports = __webpack_require__(\"3swe\");\n\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// static/js/0.d1f5d2361be639ed6955.js","define(function (require) {\n\n    var number = require('../util/number');\n    var isNumber = number.isNumber;\n\n    /**\n     * Is a method for computing the sum of a list of numbers,\n     * which will filter other data types.\n     * @param  {Array.<number>} data\n     * @return {number}\n     */\n    function sum(data) {\n\n        var len = data.length;\n\n        if (!len) {\n            return 0;\n        }\n        var sumData = 0;\n        for (var i = 0; i < len; i++) {\n            if (isNumber(data[i])) {\n                sumData += data[i];\n            }\n        }\n        return sumData;\n    }\n\n    return sum;\n\n});\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/echarts-stat/src/statistics/sum.js\n// module id = /qwy\n// module chunks = 0","define(function (require) {\n\n    return {\n\n        clustering: require('./clustering'),\n        regression: require('./regression'),\n        statistics: require('./statistics'),\n        histogram: require('./histogram')\n\n    };\n\n});\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/echarts-stat/src/ecStat.js\n// module id = 3swe\n// module chunks = 0","define(function (require) {\n\n    var quantile = require('./quantile');\n\n    /**\n     * Is a method for computing the median value of a sorted array of numbers\n     * @param  {Array.<number>} data\n     * @return {number}\n     */\n    function median(data) {\n\n        return quantile(data, 0.5);\n    }\n\n    return median;\n\n});\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/echarts-stat/src/statistics/median.js\n// module id = 6VY8\n// module chunks = 0","define(function (require) {\n\n    var array = require('./array');\n    var isArray = array.isArray;\n    var size = array.size;\n    var number = require('./number');\n    var isNumber = number.isNumber;\n\n    /**\n     * Data preprocessing, filter the wrong data object.\n     *  for example [12,] --- missing y value\n     *              [,12] --- missing x value\n     *              [12, b] --- incorrect y value\n     *              ['a', 12] --- incorrect x value\n     * @param  {Array.<Array>} data\n     * @return {Array.<Array.<number>>}\n     */\n    function dataPreprocess(data) {\n\n        if (!isArray(data)) {\n            throw new Error('Invalid data type, you should input an array');\n        }\n        var predata = [];\n        var arraySize = size(data);\n\n        if (arraySize.length === 1) {\n\n            for (var i = 0; i < arraySize[0]; i++) {\n\n                if (isNumber(data[i])) {\n                    predata.push(data[i]);\n                }\n            }\n        }\n        else if (arraySize.length === 2) {\n\n            for (var i = 0; i < arraySize[0]; i++) {\n\n                var isCorrect = true;\n                for (var j = 0; j < arraySize[1]; j++) {\n                    if (!isNumber(data[i][j])) {\n                        isCorrect = false;\n                    }\n                }\n                if (isCorrect) {\n                    predata.push(data[i]);\n                }\n            }\n        }\n        return predata;\n    }\n\n    return dataPreprocess;\n});\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/echarts-stat/src/util/dataPreprocess.js\n// module id = 8OXD\n// module chunks = 0","var $export   = require('./_export')\n  , $parseInt = require('./_parse-int');\n// 20.1.2.13 Number.parseInt(string, radix)\n$export($export.S + $export.F * (Number.parseInt != $parseInt), 'Number', {parseInt: $parseInt});\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/core-js/library/modules/es6.number.parse-int.js\n// module id = 8sHD\n// module chunks = 0","define(function (require) {\n\n    var sum = require('./sum');\n\n    /**\n     * Is a method for computing the mean value of a list of numbers,\n     * which will filter other data types.\n     * @param  {Array.<number>} data\n     * @return {number}\n     */\n    function mean(data) {\n\n        var len = data.length;\n\n        if (!len) {\n            return 0;\n        }\n\n        return sum(data) / data.length;\n\n    }\n\n    return mean;\n\n\n});\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/echarts-stat/src/statistics/mean.js\n// module id = AdH9\n// module chunks = 0","define(function (require) {\n\n    var statistics = {};\n\n    statistics.max = require('./statistics/max');\n    statistics.deviation = require('./statistics/deviation');\n    statistics.mean = require('./statistics/mean');\n    statistics.median = require('./statistics/median');\n    statistics.min = require('./statistics/min');\n    statistics.max = require('./statistics/quantile');\n    statistics.max = require('./statistics/sampleVariance');\n    statistics.sum = require('./statistics/sum');\n\n    return statistics;\n\n});\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/echarts-stat/src/statistics.js\n// module id = CcTk\n// module chunks = 0","define(function (require) {\n\n    /**\n     * Computing range array\n     * @param  {number} start\n     * @param  {number} stop\n     * @param  {number} step\n     * @return {Array.<number>}\n     */\n    return function (start, stop, step) {\n\n        var len = arguments.length;\n\n        if (len < 2) {\n            stop = start;\n            start = 0;\n            step = 1;\n        }\n        else if (len < 3) {\n            step = 1;\n        }\n        else {\n            step = +step;\n        }\n\n        var n = Math.ceil((stop - start) / step);\n        var range = new Array(n + 1);\n\n        for (var i = 0; i < n + 1; i++) {\n            range[i] = start + i * step;\n        }\n        return range;\n    };\n\n});\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/echarts-stat/src/util/range.js\n// module id = EEvw\n// module chunks = 0","define(function (require) {\n\n    /**\n     * Test whether value is a number.\n     * @param  {*}  value\n     * @return {boolean}\n     */\n    function isNumber(value) {\n\n        value = (value === null ? NaN : +value);\n        return typeof value === 'number' && !isNaN(value);\n    }\n\n    /**\n     * Test if a number is integer.\n     * @param  {number}  value\n     * @return {boolean}\n     */\n    function isInteger(value) {\n        return isFinite(value) && value === Math.round(value);\n    }\n\n    return {\n        isNumber: isNumber,\n        isInteger: isInteger\n    };\n\n});\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/echarts-stat/src/util/number.js\n// module id = FD0L\n// module chunks = 0","define(function (require) {\n\n    /**\n     * Estimating quantiles from a sorted sample of numbers\n     * @see https://en.wikipedia.org/wiki/Quantile#Estimating_quantiles_from_a_sample\n     * R-7 method\n     * @param  {Array.<number>} data  sorted array\n     * @param  {number} p\n     */\n    return function (data, p) {\n\n        var len = data.length;\n\n        if (!len) {\n            return 0;\n        }\n        if (p <= 0 || len < 2) {\n            return data[0];\n        }\n        if (p >= 1) {\n            return data[len -1];\n        }\n        // in the wikipedia's R-7 method h = (N - 1)p + 1, but here array index start from 0\n        var h = (len - 1) * p;\n        var i = Math.floor(h);\n        var a = data[i];\n        var b = data[i + 1];\n        return a + (b - a) * (h - i);\n    };\n\n});\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/echarts-stat/src/statistics/quantile.js\n// module id = GE/a\n// module chunks = 0","define(function (require) {\n\n    var dataPreprocess = require('./util/dataPreprocess');\n\n    var regreMethods = {\n\n        /**\n         * Common linear regression algorithm\n         * @param  {Array.<Array.<number>>} data two-dimensional array\n         * @return {Object}\n         */\n        linear: function (data) {\n\n            var predata = dataPreprocess(data);\n            var sumX = 0;\n            var sumY = 0;\n            var sumXY = 0;\n            var sumXX = 0;\n            var len = predata.length;\n\n            for (var i = 0; i < len; i++) {\n                sumX += predata[i][0];\n                sumY += predata[i][1];\n                sumXY += predata[i][0] * predata[i][1];\n                sumXX += predata[i][0] * predata[i][0];\n            }\n\n            var gradient = ((len * sumXY) - (sumX * sumY)) / ((len * sumXX) - (sumX * sumX));\n            var intercept = (sumY / len) - ((gradient * sumX) / len);\n\n            var result = [];\n            for (var j = 0; j < predata.length; j++) {\n                var coordinate = [predata[j][0], gradient * predata[j][0] + intercept];\n                result.push(coordinate);\n            }\n\n            var string = 'y = ' + Math.round(gradient * 100) / 100 + 'x + ' + Math.round(intercept * 100) / 100;\n\n            return {\n                points: result,\n                parameter: {\n                    gradient: gradient,\n                    intercept: intercept\n                },\n                expression: string\n            };\n        },\n\n        /**\n         * If the raw data include [0,0] point, we should choose linearThroughOrigin\n         *   instead of linear.\n         * @param  {Array.<Array>} data  two-dimensional number array\n         * @return {Object}\n         */\n        linearThroughOrigin: function (data) {\n\n            var predata = dataPreprocess(data);\n            var sumXX = 0;\n            var sumXY = 0;\n\n            for (var i = 0; i < predata.length; i++) {\n                sumXX += predata[i][0] * predata[i][0];\n                sumXY += predata[i][0] * predata[i][1];\n            }\n\n            var gradient = sumXY / sumXX;\n            var result = [];\n\n            for (var j = 0; j < predata.length; j++) {\n                var coordinate = [predata[j][0], predata[j][0] * gradient];\n                result.push(coordinate);\n            }\n\n            var string = 'y = ' + Math.round(gradient * 100) / 100 + 'x';\n\n            return {\n                points: result,\n                parameter: {\n                    gradient: gradient\n                },\n                expression: string\n            };\n        },\n\n        /**\n         * Exponential regression\n         * @param  {Array.<Array.<number>>} data  two-dimensional number array\n         * @return {Object}\n         */\n        exponential: function (data) {\n\n            var predata = dataPreprocess(data);\n            var sumX = 0;\n            var sumY = 0;\n            var sumXXY = 0;\n            var sumYlny = 0;\n            var sumXYlny = 0;\n            var sumXY = 0;\n\n            for (var i = 0; i < predata.length; i++) {\n                sumX += predata[i][0];\n                sumY += predata[i][1];\n                sumXY += predata[i][0] * predata[i][1];\n                sumXXY += predata[i][0] * predata[i][0] * predata[i][1];\n                sumYlny += predata[i][1] * Math.log(predata[i][1]);\n                sumXYlny += predata[i][0] * predata[i][1] * Math.log(predata[i][1]);\n            }\n\n            var denominator = (sumY * sumXXY) - (sumXY * sumXY);\n            var coefficient = Math.pow(Math.E, (sumXXY * sumYlny - sumXY * sumXYlny) / denominator);\n            var index = (sumY * sumXYlny - sumXY * sumYlny) / denominator;\n            var result = [];\n\n            for (var j = 0; j < predata.length; j++) {\n                var coordinate = [predata[j][0], coefficient * Math.pow(Math.E, index * predata[j][0])];\n                result.push(coordinate);\n            }\n\n            var string = 'y = ' + Math.round(coefficient * 100) / 100 + 'e^(' + Math.round(index * 100) / 100 + 'x)';\n\n            return {\n                points: result,\n                parameter: {\n                    coefficient: coefficient,\n                    index: index\n                },\n                expression: string\n            };\n\n        },\n\n        /**\n         * Logarithmic regression\n         * @param  {Array.<Array.<number>>} data  two-dimensional number array\n         * @return {Object}\n         */\n        logarithmic: function (data) {\n\n            var predata = dataPreprocess(data);\n            var sumlnx = 0;\n            var sumYlnx = 0;\n            var sumY = 0;\n            var sumlnxlnx = 0;\n\n            for (var i = 0; i < predata.length; i++) {\n                sumlnx += Math.log(predata[i][0]);\n                sumYlnx += predata[i][1] * Math.log(predata[i][0]);\n                sumY += predata[i][1];\n                sumlnxlnx += Math.pow(Math.log(predata[i][0]), 2);\n            }\n\n            var gradient = (i * sumYlnx - sumY * sumlnx) / (i * sumlnxlnx - sumlnx * sumlnx);\n            var intercept = (sumY - gradient * sumlnx) / i;\n            var result = [];\n\n            for (var j = 0; j < predata.length; j++) {\n                var coordinate = [predata[j][0], gradient * Math.log(predata[j][0]) + intercept];\n                result.push(coordinate);\n            }\n\n            var string =\n                'y = '\n                + Math.round(intercept * 100) / 100\n                + ' + '\n                + Math.round(gradient * 100) / 100 + 'ln(x)';\n\n            return {\n                points: result,\n                parameter: {\n                    gradient: gradient,\n                    intercept: intercept\n                },\n                expression: string\n            };\n\n        },\n\n        /**\n         * Polynomial regression\n         * @param  {Array.<Array.<number>>} data  two-dimensional number array\n         * @param  {number} order  order of polynomials\n         * @return {Object}\n         */\n        polynomial: function (data, order) {\n\n            var predata = dataPreprocess(data);\n            if (typeof order === 'undefined') {\n                order = 2;\n            }\n            //coefficient matrix\n            var coeMatrix = [];\n            var lhs = [];\n            var k = order + 1;\n\n            for (var i = 0; i < k; i++) {\n                var sumA = 0;\n                for (var n = 0; n < predata.length; n++) {\n                    sumA += predata[n][1] * Math.pow(predata[n][0], i);\n                }\n                lhs.push(sumA);\n\n                var temp = [];\n                for (var j = 0; j < k; j++) {\n                    var sumB = 0;\n                    for (var m = 0; m < predata.length; m++) {\n                        sumB += Math.pow(predata[m][0], i + j);\n                    }\n                    temp.push(sumB);\n                }\n                coeMatrix.push(temp);\n            }\n            coeMatrix.push(lhs);\n\n            var coeArray = gaussianElimination(coeMatrix, k);\n\n            var result = [];\n\n            for (var i = 0; i < predata.length; i++) {\n                var value = 0;\n                for (var n = 0; n < coeArray.length; n++) {\n                    value += coeArray[n] * Math.pow(predata[i][0], n);\n                }\n                result.push([predata[i][0], value]);\n            }\n\n            var string = 'y = ';\n            for (var i = coeArray.length - 1; i >= 0; i--) {\n                if (i > 1) {\n                    string += Math.round(coeArray[i] * Math.pow(10, i + 1)) / Math.pow(10, i + 1) + 'x^' + i + ' + ';\n                }\n                else if (i === 1) {\n                    string += Math.round(coeArray[i] * 100) / 100 + 'x' + ' + ';\n                }\n                else {\n                    string += Math.round(coeArray[i] * 100) / 100;\n                }\n            }\n\n            return {\n                points: result,\n                parameter: coeArray,\n                expression: string\n            };\n\n        }\n\n    };\n\n    /**\n     * Gaussian elimination\n     * @param  {Array.<Array.<number>>} matrix   two-dimensional number array\n     * @param  {number} number\n     * @return {Array}\n     */\n    function gaussianElimination(matrix, number) {\n\n        for (var i = 0; i < matrix.length - 1; i++) {\n            var maxColumn = i;\n            for (var j = i + 1; j < matrix.length - 1; j++) {\n                if (Math.abs(matrix[i][j]) > Math.abs(matrix[i][maxColumn])) {\n                    maxColumn = j;\n                }\n            }\n            // the matrix here is the transpose of the common Augmented matrix.\n            //  so the can perform the primary column transform, in fact, equivalent\n            //  to the primary line changes\n            for (var k = i; k < matrix.length; k++) {\n                var temp = matrix[k][i];\n                matrix[k][i] = matrix[k][maxColumn];\n                matrix[k][maxColumn] = temp;\n            }\n            for (var n = i + 1; n < matrix.length - 1; n++) {\n                for (var m = matrix.length - 1; m >= i; m--) {\n                    matrix[m][n] -= matrix[m][i] / matrix[i][i] * matrix[i][n];\n                }\n            }\n        }\n\n        var data = new Array(number);\n        var len = matrix.length - 1;\n        for (var j = matrix.length - 2; j >= 0; j--) {\n            var temp = 0;\n            for (var i = j + 1; i < matrix.length - 1; i++) {\n                temp += matrix[i][j] * data[i];\n            }\n            data[j] = (matrix[len][j] - temp) / matrix[j][j];\n\n        }\n\n        return data;\n    }\n\n    var regression = function (regreMethod, data, order) {\n\n        return regreMethods[regreMethod](data, order);\n\n    };\n\n    return regression;\n\n});\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/echarts-stat/src/regression.js\n// module id = KPhj\n// module chunks = 0","var $parseInt = require('./_global').parseInt\n  , $trim     = require('./_string-trim').trim\n  , ws        = require('./_string-ws')\n  , hex       = /^[\\-+]?0[xX]/;\n\nmodule.exports = $parseInt(ws + '08') !== 8 || $parseInt(ws + '0x16') !== 22 ? function parseInt(str, radix){\n  var string = $trim(String(str), 3);\n  return $parseInt(string, (radix >>> 0) || (hex.test(string) ? 16 : 10));\n} : $parseInt;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/core-js/library/modules/_parse-int.js\n// module id = KpO7\n// module chunks = 0","module.exports={render:function (){var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;\n  return _c('div', {\n    staticClass: \"chart2\",\n    attrs: {\n      \"name\": \"Chart2\"\n    }\n  }, [_c('div', {\n    staticClass: \"data-area\"\n  }, [_c('div', {\n    staticClass: \"clearfix\"\n  }, _vm._l((_vm.trueLength), function(item, index) {\n    return _c('div', {\n      key: index,\n      staticClass: \"form-group col-xs-3 col-md-3\"\n    }, [_c('input', {\n      directives: [{\n        name: \"model\",\n        rawName: \"v-model\",\n        value: (_vm.data[index][0]),\n        expression: \"data[index][0]\"\n      }],\n      staticClass: \"form-control\",\n      attrs: {\n        \"type\": \"number\"\n      },\n      domProps: {\n        \"value\": (_vm.data[index][0])\n      },\n      on: {\n        \"keyup\": function($event) {\n          if (!('button' in $event) && _vm._k($event.keyCode, \"enter\", 13)) { return null; }\n          _vm.indexChange(_vm.data[index][0], index)\n        },\n        \"input\": function($event) {\n          if ($event.target.composing) { return; }\n          var $$exp = _vm.data[index],\n            $$idx = 0;\n          if (!Array.isArray($$exp)) {\n            _vm.data[index][0] = $event.target.value\n          } else {\n            $$exp.splice($$idx, 1, $event.target.value)\n          }\n        },\n        \"blur\": function($event) {\n          _vm.$forceUpdate()\n        }\n      }\n    }), _c('input', {\n      directives: [{\n        name: \"model\",\n        rawName: \"v-model\",\n        value: (_vm.data[index][1]),\n        expression: \"data[index][1]\"\n      }],\n      staticClass: \"form-control\",\n      attrs: {\n        \"type\": \"number\"\n      },\n      domProps: {\n        \"value\": (_vm.data[index][1])\n      },\n      on: {\n        \"input\": function($event) {\n          if ($event.target.composing) { return; }\n          var $$exp = _vm.data[index],\n            $$idx = 1;\n          if (!Array.isArray($$exp)) {\n            _vm.data[index][1] = $event.target.value\n          } else {\n            $$exp.splice($$idx, 1, $event.target.value)\n          }\n        },\n        \"blur\": function($event) {\n          _vm.$forceUpdate()\n        }\n      }\n    })])\n  })), _vm._v(\" \"), _c('div', {\n    staticClass: \"clearfix\"\n  }, [_c('div', {\n    staticClass: \"form-group col-xs-12 col-md-12\"\n  }, [_c('label', [_vm._v(\"Length\")]), _vm._v(\" \"), _c('input', {\n    directives: [{\n      name: \"model\",\n      rawName: \"v-model\",\n      value: (_vm.length),\n      expression: \"length\"\n    }],\n    attrs: {\n      \"type\": \"text\",\n      \"maxlength\": \"2\"\n    },\n    domProps: {\n      \"value\": (_vm.length)\n    },\n    on: {\n      \"keyup\": function($event) {\n        if (!('button' in $event) && _vm._k($event.keyCode, \"enter\", 13)) { return null; }\n        _vm.reset($event)\n      },\n      \"input\": function($event) {\n        if ($event.target.composing) { return; }\n        _vm.length = $event.target.value\n      }\n    }\n  }), _vm._v(\" \"), _c('button', {\n    staticClass: \"btn btn-sm btn-info\",\n    on: {\n      \"click\": _vm.reset\n    }\n  }, [_vm._v(\"Reset\")]), _vm._v(\" \"), _c('button', {\n    staticClass: \"btn btn-sm btn-success\",\n    on: {\n      \"click\": _vm.initCharts\n    }\n  }, [_vm._v(\"Paint\")])])])]), _vm._v(\" \"), _c('div', {\n    staticClass: \"chart-ctn\",\n    attrs: {\n      \"id\": \"chartsCtn\"\n    }\n  })])\n},staticRenderFns: []}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/vue-loader/lib/template-compiler.js?id=data-v-3570880a!./~/vue-loader/lib/selector.js?type=template&index=0!./src/components/Chart2.vue\n// module id = Laaf\n// module chunks = 0","define(function (require) {\n\n    var number = require('../util/number');\n    var isNumber = number.isNumber;\n\n    /**\n     * Is a method for computing the min value of a list of numbers,\n     * which will filter other data types.\n     * @param  {Array.<number>} data\n     * @return {number}\n     */\n    function min(data) {\n\n        var minData = Infinity;\n        for (var i = 0; i < data.length; i++) {\n            if (isNumber(data[i]) && data[i] < minData) {\n                minData = data[i];\n            }\n        }\n        return minData;\n    }\n\n    return min;\n\n});\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/echarts-stat/src/statistics/min.js\n// module id = Qn3C\n// module chunks = 0","<template>\r\n    <div name=\"Chart2\" class=\"chart2\">\r\n        <div class=\"data-area\">\r\n            <div class=\"clearfix\">\r\n                <div class=\"form-group col-xs-3 col-md-3\" v-for=\"(item,index) in trueLength\" :key=\"index\">\r\n                    <input class=\"form-control\" type=\"number\" v-model=\"data[index][0]\" @keyup.enter=\"indexChange(data[index][0],index)\"><input class=\"form-control\" type=\"number\" v-model=\"data[index][1]\">\r\n                </div>\r\n            </div>\r\n            <div class=\"clearfix\">\r\n                <div class=\"form-group col-xs-12 col-md-12\">\r\n                    <label>Length</label>\r\n                    <input type=\"text\" maxlength=\"2\" v-model=\"length\" @keyup.enter=\"reset\">\r\n                    <button class=\"btn btn-sm btn-info\" v-on:click='reset'>Reset</button>\r\n                    <button class=\"btn btn-sm btn-success\" v-on:click='initCharts'>Paint</button>\r\n                </div>\r\n            </div>\r\n        </div>\r\n        <div class=\"chart-ctn\" id=\"chartsCtn\"></div>\r\n    </div>\r\n</template>\r\n<script>\r\nimport eCharts from 'echarts';\r\nimport ecStat from 'echarts-stat';\r\nvar initData = function(length) {\r\n  let array = [];\r\n  for (let i = 0; i < length; i++) {\r\n    array.push([i, '']);\r\n  }\r\n  return array;\r\n};\r\nvar fetchData = function(data) {\r\n  let array = [];\r\n  for (let i = 0, l = data.length; i < l; i++) {\r\n    if (data[i][1]) {\r\n      array.push(data[i]);\r\n    } else {\r\n      break;\r\n    }\r\n  }\r\n  return array;\r\n};\r\nexport default {\r\n  name: 'chart2',\r\n  data() {\r\n    return {\r\n      data: [],\r\n      length: 12,\r\n      trueLength: 12\r\n    };\r\n  },\r\n  methods: {\r\n    reset: function() {\r\n      console.log(this.length);\r\n      this.trueLength = Number.parseInt(this.length);\r\n      this.data = initData(this.trueLength);\r\n    },\r\n    indexChange: function(number, index) {\r\n      number = Number.parseInt(number);\r\n      this.data = this.data.map((item, i) => {\r\n        if (i > index) {\r\n          item[0] = number + i - index;\r\n          return item;\r\n        } else {\r\n          return item;\r\n        }\r\n      });\r\n    },\r\n    initCharts: function() {\r\n      let target = fetchData(this.data);\r\n      var myRegression = ecStat.regression('polynomial', target, 3);\r\n      myRegression.points.sort(function(a, b) {\r\n        return a[0] - b[0];\r\n      });\r\n      // 图表渲染\r\n      var myCharts = eCharts.init(document.getElementById('chartsCtn'));\r\n      myCharts.setOption({\r\n        toolbox: {\r\n          feature: {\r\n            saveAsImage: {}\r\n          }\r\n        },\r\n        xAxis: {\r\n          type: 'value',\r\n          splitLine: {\r\n            lineStyle: {\r\n              type: 'dashed'\r\n            }\r\n          },\r\n          max: 'dataMax',\r\n          min: 'dataMin'\r\n        },\r\n        yAxis: {\r\n          type: 'value',\r\n          splitLine: {\r\n            lineStyle: {\r\n              type: 'dashed'\r\n            }\r\n          },\r\n          max: 'dataMax',\r\n          min: 'dataMin'\r\n        },\r\n        series: [\r\n          {\r\n            name: 'data',\r\n            type: 'line',\r\n            data: target\r\n          },\r\n          {\r\n            name: 'standard',\r\n            type: 'line',\r\n            data: myRegression.points,\r\n            markPoint: {\r\n              itemStyle: {\r\n                normal: {\r\n                  color: 'transparent'\r\n                }\r\n              },\r\n              label: {\r\n                normal: {\r\n                  show: true,\r\n                  position: 'left',\r\n                  formatter: myRegression.expression,\r\n                  textStyle: {\r\n                    color: '#333',\r\n                    fontSize: 14\r\n                  }\r\n                }\r\n              },\r\n              data: [\r\n                {\r\n                  coord: myRegression.points[myRegression.points.length - 1]\r\n                }\r\n              ]\r\n            }\r\n          }\r\n        ]\r\n      });\r\n    }\r\n  },\r\n  created: function() {\r\n    this.data = initData(this.length);\r\n  }\r\n};\r\n</script>\r\n<style lang=\"scss\" scoped>\r\n.chart2 {\r\n  display: flex;\r\n  flex-direction: column;\r\n  height: 100%;\r\n  input {\r\n    text-align: center !important;\r\n  }\r\n}\r\n.chart-ctn {\r\n  height: 480px;\r\n  width: 100%;\r\n}\r\n</style>\r\n\n\n\n// WEBPACK FOOTER //\n// Chart2.vue?2c1eece3","define(function (require) {\n\n    var objToString = Object.prototype.toString;\n    var arrayProto = Array.prototype;\n    var nativeMap = arrayProto.map;\n\n    /**\n     * Get the size of a array\n     * @param  {Array} data\n     * @return {Array}\n     */\n    function size(data) {\n        var s = [];\n        while (isArray(data)) {\n            s.push(data.length);\n            data = data[0];\n        }\n        return s;\n    }\n\n    /**\n     * @param {*}  value\n     * @return {boolean}\n     */\n    function isArray(value) {\n        return objToString.call(value) === '[object Array]';\n    }\n\n    /**\n     * constructs a (m x n) array with all values 0\n     * @param  {number} m  the row\n     * @param  {number} n  the column\n     * @return {Array}\n     */\n    function zeros(m, n) {\n        var zeroArray = [];\n        for (var i = 0; i < m ; i++) {\n            zeroArray[i] = [];\n            for (var j = 0; j < n; j++) {\n                zeroArray[i][j] = 0;\n            }\n        }\n        return zeroArray;\n    }\n\n    /**\n     * Sums each element in the array.\n     * Internal use, for performance considerations, to avoid\n     * unnecessary judgments and calculations.\n     * @param  {Array} vector\n     * @return {number}\n     */\n    function sum(vector) {\n        var sum = 0;\n        for (var i = 0; i < vector.length; i++) {\n            sum += vector[i];\n        }\n        return sum;\n    }\n\n    /**\n     * Computes the sum of the specified column elements in a two-dimensional array\n     * @param  {Array.<Array>} dataList  two-dimensional array\n     * @param  {number} n  the specified column, zero-based\n     * @return {number}\n     */\n    function sumOfColumn(dataList, n) {\n        var sum = 0;\n        for (var i = 0; i < dataList.length; i++) {\n            sum += dataList[i][n];\n        }\n        return sum;\n    }\n\n\n    function ascending(a, b) {\n\n        return a > b ? 1 : a < b ? -1 : a === b ? 0 : NaN;\n\n    }\n\n    /**\n     * Binary search algorithm --- this bisector is specidfied to histogram, which every bin like that [a, b),\n     * so the return value use to add 1.\n     * @param  {Array.<number>} array\n     * @param  {number} value\n     * @param  {number} start\n     * @param  {number} end\n     * @return {number}\n     */\n    function bisect(array, value, start, end) { //移出去\n\n        if (start == null) {\n            start = 0;\n        }\n        if (end == null) {\n            end = array.length;\n        }\n        while (start < end) {\n            var mid = Math.floor((start + end) / 2);\n            var compare = ascending(array[mid], value);\n            if (compare > 0) {\n                end = mid;\n            }\n            else if (compare < 0) {\n                start = mid + 1;\n            }\n            else {\n                return mid + 1;\n            }\n        }\n        return start;\n    }\n\n    /**\n     * 数组映射\n     * @memberOf module:zrender/core/util\n     * @param {Array} obj\n     * @param {Function} cb\n     * @param {*} [context]\n     * @return {Array}\n     */\n    function map(obj, cb, context) {\n        if (!(obj && cb)) {\n            return;\n        }\n        if (obj.map && obj.map === nativeMap) {\n            return obj.map(cb, context);\n        }\n        else {\n            var result = [];\n            for (var i = 0, len = obj.length; i < len; i++) {\n                result.push(cb.call(context, obj[i], i, obj));\n            }\n            return result;\n        }\n    }\n\n\n    return {\n        size: size,\n        isArray: isArray,\n        zeros: zeros,\n        sum: sum,\n        sumOfColumn: sumOfColumn,\n        ascending: ascending,\n        bisect: bisect,\n        map: map\n    };\n\n});\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/echarts-stat/src/util/array.js\n// module id = TDOf\n// module chunks = 0","define(function (require) {\n\n    /**\n     * Computing the length of step\n     * @see  https://github.com/d3/d3-array/blob/master/src/ticks.js\n     * @param {number} start\n     * @param {number} stop\n     * @param {number} count\n     */\n    return function (start, stop, count) {\n\n        var step0 = Math.abs(stop - start) / count;\n        var step1 = Math.pow(10, Math.floor(Math.log(step0) / Math.LN10));\n        var error = step0 / step1;\n\n        if (error >= Math.sqrt(50)) {\n            step1 *= 10;\n        }\n        else if (error >= Math.sqrt(10)) {\n            step1 *= 5;\n        }\n        else if(error >= Math.sqrt(2)) {\n            step1 *= 2;\n        }\n        return stop >= start ? step1 : -step1;\n\n    };\n\n});\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/echarts-stat/src/util/tickStep.js\n// module id = VofG\n// module chunks = 0","\n/* styles */\nrequire(\"!!../../node_modules/extract-text-webpack-plugin/loader.js?{\\\"omit\\\":1,\\\"remove\\\":true}!vue-style-loader!css-loader?sourceMap!../../node_modules/vue-loader/lib/style-rewriter?id=data-v-3570880a&scoped=true!sass-loader?sourceMap!../../node_modules/vue-loader/lib/selector?type=styles&index=0!./Chart2.vue\")\n\nvar Component = require(\"!../../node_modules/vue-loader/lib/component-normalizer\")(\n  /* script */\n  require(\"!!babel-loader!../../node_modules/vue-loader/lib/selector?type=script&index=0!./Chart2.vue\"),\n  /* template */\n  require(\"!!../../node_modules/vue-loader/lib/template-compiler?id=data-v-3570880a!../../node_modules/vue-loader/lib/selector?type=template&index=0!./Chart2.vue\"),\n  /* scopeId */\n  \"data-v-3570880a\",\n  /* cssModules */\n  null\n)\n\nmodule.exports = Component.exports\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/components/Chart2.vue\n// module id = YNOL\n// module chunks = 0","define(function (require) {\n\n    var variance = require('./sampleVariance');\n\n    /**\n     * Computing the deviation\n     * @param  {Array.<number>} data\n     * @return {number}\n     */\n    return function (data) {\n\n        var squaredDeviation = variance(data);\n\n        return squaredDeviation ? Math.sqrt(squaredDeviation) : squaredDeviation;\n    };\n});\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/echarts-stat/src/statistics/deviation.js\n// module id = aFh2\n// module chunks = 0","module.exports = { \"default\": require(\"core-js/library/fn/number/parse-int\"), __esModule: true };\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/babel-runtime/core-js/number/parse-int.js\n// module id = gBtx\n// module chunks = 0","define(function (require) {\n\n    var number = require('../util/number');\n    var isNumber = number.isNumber;\n\n    /**\n     * Is a method for computing the max value of a list of numbers,\n     * which will filter other data types.\n     * @param  {Array.<number>} data\n     * @return {number}\n     */\n    function max(data) {\n\n        var maxData = -Infinity;\n        for (var i = 0; i < data.length; i++) {\n            if (isNumber(data[i]) && data[i] > maxData) {\n                maxData = data[i];\n            }\n        }\n        return maxData;\n    }\n\n    return max;\n\n});\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/echarts-stat/src/statistics/max.js\n// module id = gSCM\n// module chunks = 0","module.exports = '\\x09\\x0A\\x0B\\x0C\\x0D\\x20\\xA0\\u1680\\u180E\\u2000\\u2001\\u2002\\u2003' +\n  '\\u2004\\u2005\\u2006\\u2007\\u2008\\u2009\\u200A\\u202F\\u205F\\u3000\\u2028\\u2029\\uFEFF';\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/core-js/library/modules/_string-ws.js\n// module id = hyta\n// module chunks = 0","define(function (require) {\n\n    var dataPreprocess = require('./util/dataPreprocess');\n    var array = require('./util/array');\n    var arraySize = array.size;\n    var sumOfColumn = array.sumOfColumn;\n    var arraySum = array.sum;\n    var zeros = array.zeros;\n    var isArray = array.isArray;\n    var mathSqrt = Math.sqrt;\n    var mathPow = Math.pow;\n\n    /**\n     * KMeans of clustering algorithm\n     * @param  {Array.<Array.<number>>} data  two-dimension array\n     * @param  {number} k   the number of clusters in a dataset\n     * @return {Object}\n     */\n    function kMeans(data, k) {\n\n        var size = arraySize(data);\n        // create array to assign data points to centroids, also holds SE of each point\n        var clusterAssigned = zeros(size[0], 2);\n        var centroids = createRandCent(data, k);\n        var clusterChanged = true;\n        var minDist;\n        var minIndex;\n        var distIJ;\n        var ptsInClust;\n\n        while (clusterChanged) {\n            clusterChanged = false;\n            for (var i = 0; i < size[0]; i++) {\n                minDist = Infinity;\n                minIndex = -1;\n                for (var j = 0; j < k; j++) {\n                    distIJ = distEuclid(data[i], centroids[j]);\n                    if (distIJ < minDist) {\n                        minDist = distIJ;\n                        minIndex = j;\n                    }\n                }\n                if (clusterAssigned[i][0] !== minIndex) {\n                    clusterChanged = true;\n                }\n                clusterAssigned[i][0] = minIndex;\n                clusterAssigned[i][1] = mathPow(minDist, 2);\n            }\n            //recalculate centroids\n            for (var i = 0; i < k; i++) {\n                ptsInClust = [];\n                for (var j = 0; j < clusterAssigned.length; j++) {\n                    if (clusterAssigned[j][0] === i) {\n                        ptsInClust.push(data[j]);\n                    }\n                }\n                centroids[i] = meanInColumns(ptsInClust);\n            }\n        }\n\n        var clusterWithKmeans = {\n            centroids: centroids,\n            clusterAssigned: clusterAssigned\n        };\n        return clusterWithKmeans;\n    }\n\n    /**\n     * Calculate the average of each column in a two-dimensional array\n     *  and returns the values as an array.\n     * @param  {Array.<Array>} dataList two-dimensional array\n     * @return {Array}\n     */\n    function meanInColumns(dataList) {\n\n        var size = arraySize(dataList);\n        var meanArray = [];\n        var sum;\n        var mean;\n        for (var j = 0; j < size[1]; j++) {\n            sum = 0;\n            for (var i = 0; i < size[0]; i++) {\n                sum += dataList[i][j];\n            }\n            mean = sum / size[0];\n            meanArray.push(mean);\n        }\n        return meanArray;\n    }\n\n    /**\n     * The combine of hierarchical clustering and k-means.\n     * @param  {Array} data   two-dimension array.\n     * @param  {[type]} k   the number of clusters in a dataset\n     * @param  {boolean}  stepByStep\n     * @return {}\n     */\n    function hierarchicalKMeans(data, k, stepByStep) {\n\n        var dataSet = dataPreprocess(data);\n        var size = arraySize(dataSet);\n        var clusterAssment = zeros(size[0], 2);\n        // initial center point\n        var centroid0 = meanInColumns(dataSet);\n        var centList = [centroid0];\n        var squareError;\n        for (var i = 0; i < size[0]; i++) {\n            squareError = distEuclid(dataSet[i], centroid0);\n            clusterAssment[i][1] = mathPow(squareError, 2);\n        }\n        var lowestSSE;\n        var ptsInClust;\n        var ptsNotClust;\n        var clusterInfo;\n        var sseSplit;\n        var sseNotSplit;\n        var index = 1;\n        var result = {\n            isEnd: false\n        };\n\n        function oneStep() {\n            //the existing clusters are continuously divided\n            //until the number of clusters is k\n            if (index < k) {\n                lowestSSE = Infinity;\n                var centSplit;\n                var newCentroid;\n                var newClusterAss;\n\n                for (var j = 0; j < centList.length; j++) {\n                    ptsInClust = [];\n                    ptsNotClust = [];\n                    for (var i = 0; i < clusterAssment.length; i++) {\n                        if (clusterAssment[i][0] === j) {\n                            ptsInClust.push(dataSet[i]);\n                        }\n                        else {\n                            ptsNotClust.push(clusterAssment[i][1]);\n                        }\n                    }\n                    clusterInfo = kMeans(ptsInClust, 2);\n                    sseSplit = sumOfColumn(clusterInfo.clusterAssigned, 1);\n                    sseNotSplit = arraySum(ptsNotClust);\n                    if (sseSplit + sseNotSplit < lowestSSE) {\n                        lowestSSE = sseNotSplit + sseSplit;\n                        centSplit = j;\n                        newCentroid = clusterInfo.centroids;\n                        newClusterAss = clusterInfo.clusterAssigned;\n                    }\n                }\n\n                for (var i = 0; i < newClusterAss.length; i++) {\n                    if (newClusterAss[i][0] === 0) {\n                        newClusterAss[i][0] = centSplit;\n                    }\n                    else if (newClusterAss[i][0] === 1) {\n                        newClusterAss[i][0] = centList.length;\n                    }\n                }\n\n                centList[centSplit] = newCentroid[0];\n                centList.push(newCentroid[1]);\n                for ( i = 0, j = 0; i < clusterAssment.length && j < newClusterAss.length; i++) {\n                    if (clusterAssment[i][0] === centSplit) {\n                        clusterAssment[i][0] = newClusterAss[j][0];\n                        clusterAssment[i][1] = newClusterAss[j++][1];\n                    }\n                }\n\n                var pointInClust = [];\n                for (var i = 0; i < centList.length; i++) {\n                    pointInClust[i] = [];\n                    for (var j = 0; j < clusterAssment.length; j++) {\n                        if (clusterAssment[j][0] === i) {\n                            pointInClust[i].push(dataSet[j]);\n                        }\n                    }\n                }\n\n                result.clusterAssment = clusterAssment;\n                result.centroids = centList;\n                result.pointsInCluster = pointInClust;\n\n\n                index++;\n            }\n            else {\n                result.isEnd = true;\n            }\n\n            return result;\n        }\n\n        var step = {\n            next: oneStep\n        };\n\n        if (!stepByStep) {\n            var result;\n            while (!(result = step.next()).isEnd);\n            return result;\n        }\n        else {\n            return step;\n        }\n\n    }\n\n    /**\n     * Create random centroid of kmeans.\n     * @param  {Array.<number>} dataSet  two-dimension array\n     * @param  {number} k   the number of centroids to be created\n     * @return {Array.<number>}   random centroids of kmeans\n     */\n    function createRandCent(dataSet, k) {\n        var size = arraySize(dataSet);\n        //constructs a two-dimensional array with all values 0\n        var centroids = zeros(k, size[1]);\n        var minJ;\n        var maxJ;\n        var rangeJ;\n        //create random cluster centers, within bounds of each dimension\n        for (var j = 0; j < size[1]; j++) {\n            minJ = dataSet[0][j];\n            maxJ = dataSet[0][j];\n            for (var i = 1; i < size[0]; i++) {\n                if (dataSet[i][j] < minJ) {\n                    minJ = dataSet[i][j];\n                }\n                if (dataSet[i][j] > maxJ) {\n                    maxJ = dataSet[i][j];\n                }\n            }\n            rangeJ = maxJ - minJ;\n            for (var i = 0; i < k; i++) {\n                centroids[i][j] = minJ + rangeJ * Math.random();\n            }\n        }\n        return centroids;\n    }\n\n    /**\n     * Distance method for calculating similarity\n     * @param  {Array.<number>}  vec1\n     * @param  {Array.<nnumber>}  vec2\n     * @return {number}\n     */\n    function distEuclid(vec1, vec2) {\n\n        if (!isArray(vec1) && !isArray(vec2)) {\n            return mathSqrt(mathPow(vec1 - vec2, 2));\n        }\n\n        var powerSum = 0;\n        //subtract the corresponding elements in the vectors\n        for (var i = 0; i < vec1.length; i++) {\n            powerSum += mathPow(vec1[i] - vec2[i], 2);\n        }\n\n        return mathSqrt(powerSum);\n    }\n\n    return {\n        kMeans: kMeans,\n        hierarchicalKMeans: hierarchicalKMeans\n    };\n\n});\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/echarts-stat/src/clustering.js\n// module id = iU7c\n// module chunks = 0","define(function (require) {\n\n    var number = require('../util/number');\n    var isNumber = number.isNumber;\n    var mean = require('./mean');\n\n    /**\n     * Computing the variance of list of sample\n     * @param  {Array.<number>} data\n     * @return {number}\n     */\n    function sampleVariance(data) {\n\n        var len = data.length;\n        if (!len || len < 2) {\n            return 0;\n        }\n        if (data.length >= 2) {\n\n            var meanValue = mean(data);\n            var sum = 0;\n            var temple;\n\n            for (var i = 0; i < data.length; i++) {\n                if (isNumber(data[i])) {\n                    temple = data[i] - meanValue;\n                    sum += temple * temple;\n                }\n            }\n            return sum / data.length - 1;\n        }\n    }\n\n    return sampleVariance;\n\n});\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/echarts-stat/src/statistics/sampleVariance.js\n// module id = jhyr\n// module chunks = 0","// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = require(\"!!../../node_modules/css-loader/index.js?sourceMap!../../node_modules/vue-loader/lib/style-rewriter.js?id=data-v-3570880a&scoped=true!../../node_modules/sass-loader/lib/loader.js?sourceMap!../../node_modules/vue-loader/lib/selector.js?type=styles&index=0!./Chart2.vue\");\nif(typeof content === 'string') content = [[module.id, content, '']];\nif(content.locals) module.exports = content.locals;\n// add the styles to the DOM\nvar update = require(\"!../../node_modules/vue-style-loader/lib/addStylesClient.js\")(\"0ca2cf9a\", content, true);\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/extract-text-webpack-plugin/loader.js?{\"omit\":1,\"remove\":true}!./~/vue-style-loader!./~/css-loader?sourceMap!./~/vue-loader/lib/style-rewriter.js?id=data-v-3570880a&scoped=true!./~/sass-loader/lib/loader.js?sourceMap!./~/vue-loader/lib/selector.js?type=styles&index=0!./src/components/Chart2.vue\n// module id = kXkD\n// module chunks = 0","var $export = require('./_export')\n  , defined = require('./_defined')\n  , fails   = require('./_fails')\n  , spaces  = require('./_string-ws')\n  , space   = '[' + spaces + ']'\n  , non     = '\\u200b\\u0085'\n  , ltrim   = RegExp('^' + space + space + '*')\n  , rtrim   = RegExp(space + space + '*$');\n\nvar exporter = function(KEY, exec, ALIAS){\n  var exp   = {};\n  var FORCE = fails(function(){\n    return !!spaces[KEY]() || non[KEY]() != non;\n  });\n  var fn = exp[KEY] = FORCE ? exec(trim) : spaces[KEY];\n  if(ALIAS)exp[ALIAS] = fn;\n  $export($export.P + $export.F * FORCE, 'String', exp);\n};\n\n// 1 -> String#trimLeft\n// 2 -> String#trimRight\n// 3 -> String#trim\nvar trim = exporter.trim = function(string, TYPE){\n  string = String(defined(string));\n  if(TYPE & 1)string = string.replace(ltrim, '');\n  if(TYPE & 2)string = string.replace(rtrim, '');\n  return string;\n};\n\nmodule.exports = exporter;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/core-js/library/modules/_string-trim.js\n// module id = mnVu\n// module chunks = 0","exports = module.exports = require(\"../../node_modules/css-loader/lib/css-base.js\")();\n// imports\n\n\n// module\nexports.push([module.id, \"\\n.chart2[data-v-3570880a] {\\n  display: -ms-flexbox;\\n  display: flex;\\n  -ms-flex-direction: column;\\n      flex-direction: column;\\n  height: 100%;\\n}\\n.chart2 input[data-v-3570880a] {\\n    text-align: center !important;\\n}\\n.chart-ctn[data-v-3570880a] {\\n  height: 480px;\\n  width: 100%;\\n}\\n\", \"\", {\"version\":3,\"sources\":[\"D:/Mr_SPM/vue/src/components/Chart2.vue\"],\"names\":[],\"mappings\":\";AACA;EACE,qBAAqB;EACrB,cAAc;EACd,2BAA2B;MACvB,uBAAuB;EAC3B,aAAa;CACd;AACD;IACI,8BAA8B;CACjC;AACD;EACE,cAAc;EACd,YAAY;CACb\",\"file\":\"Chart2.vue\",\"sourcesContent\":[\"\\n.chart2[data-v-3570880a] {\\n  display: -ms-flexbox;\\n  display: flex;\\n  -ms-flex-direction: column;\\n      flex-direction: column;\\n  height: 100%;\\n}\\n.chart2 input[data-v-3570880a] {\\n    text-align: center !important;\\n}\\n.chart-ctn[data-v-3570880a] {\\n  height: 480px;\\n  width: 100%;\\n}\\n\"],\"sourceRoot\":\"\"}]);\n\n// exports\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/css-loader?sourceMap!./~/vue-loader/lib/style-rewriter.js?id=data-v-3570880a&scoped=true!./~/sass-loader/lib/loader.js?sourceMap!./~/vue-loader/lib/selector.js?type=styles&index=0!./src/components/Chart2.vue\n// module id = nF0Y\n// module chunks = 0","define(function (require) {\n\n    var max = require('./statistics/max');\n    var min = require('./statistics/min');\n    var quantile = require('./statistics/quantile');\n    var deviation = require('./statistics/deviation');\n    var dataPreprocess = require('./util/dataPreprocess');\n    var array = require('./util/array');\n    var ascending = array.ascending;\n    var map = array.map;\n    var range = require('./util/range');\n    var bisect = array.bisect;\n    var tickStep = require('./util/tickStep');\n\n    /**\n     * Compute bins for histogram\n     * @param  {Array.<number>} data\n     * @param  {string} threshold\n     * @return {Object}\n     */\n    function computeBins(data, threshold) {\n\n        if (threshold == null) {\n\n            threshold = thresholdMethod.squareRoot;\n\n        }\n        else {\n\n            threshold = thresholdMethod[threshold];\n\n        }\n        var values = dataPreprocess(data);\n        var maxValue = max(values);\n        var minValue = min(values);\n\n        var binsNumber = threshold(values, minValue, maxValue);\n\n        var step = tickStep(minValue, maxValue, binsNumber);\n\n        // return the xAxis coordinate for each bins, except the end point of the value\n        var rangeArray = range(Math.ceil(minValue / step) * step, Math.floor(maxValue / step) * step, step);\n\n        var len = rangeArray.length;\n\n        var bins = new Array(len + 1);\n\n        for (var i = 0; i <= len; i++) {\n            bins[i] = {};\n            bins[i].sample = [];\n            bins[i].x0 = i > 0 // 不要数组直接挂属性，改成Object\n                ? rangeArray[i - 1]\n                : (rangeArray[i] - minValue) === step\n                ? minValue\n                : (rangeArray[i] - step);\n            bins[i].x1 = i < len\n                ? rangeArray[i]\n                : (maxValue - rangeArray[i-1]) === step\n                ? maxValue\n                : rangeArray[i - 1] + step;\n        }\n\n        for (var i = 0; i < values.length; i++) {\n            if (minValue <= values[i] && values[i] <= maxValue) {\n                bins[bisect(rangeArray, values[i], 0, len)].sample.push(values[i]);\n            }\n        }\n\n        var data = map(bins, function (bin) {\n            return [(bin.x0 + bin.x1) / 2, bin.sample.length];\n        });\n\n        return {\n            bins: bins,\n            data: data\n        };\n    }\n\n\n    /**\n     * Four kinds of threshold methods used to\n     * compute how much bins the histogram should be divided\n     * @see  https://en.wikipedia.org/wiki/Histogram\n     * @type {Object}\n     */\n    var thresholdMethod = {\n\n        squareRoot: function (data) {\n\n            var bins = Math.ceil(Math.sqrt(data.length));\n\n            return bins > 50 ? 50 : bins;\n        },\n\n        scott: function (data, min, max) {\n\n            return Math.ceil((max - min) / (3.5 * deviation(data) * Math.pow(data.length, -1 / 3)));\n        },\n\n        freedmanDiaconis: function (data, min, max) {\n\n            data.sort(ascending);\n\n            return Math.ceil(\n                (max - min) / (2 * (quantile(data, 0.75) - quantile(data, 0.25)) * Math.pow(data.length, -1 / 3))\n            );\n        },\n\n        sturges: function (data) {\n\n            return Math.ceil(Math.log(data.length) / Math.LN2) + 1;\n\n        }\n    };\n\n    return computeBins;\n\n});\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/echarts-stat/src/histogram.js\n// module id = oooa\n// module chunks = 0","require('../../modules/es6.number.parse-int');\nmodule.exports = parseInt;\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/core-js/library/fn/number/parse-int.js\n// module id = qrpI\n// module chunks = 0","module.exports = require('./src/ecStat');\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/echarts-stat/index.js\n// module id = siuG\n// module chunks = 0"],"sourceRoot":""}